/**
 * PTV Open Api version 10
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v10
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

/**
* Interface for view model error message.
*/
export class IVmError {
    /**
    * View model error message.
    */
    'errorMessage'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return IVmError.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of electronic channel
*/
export class V10VmOpenApiElectronicChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * How many signatures are required.
    */
    'signatureQuantity'?: number;
    /**
    * Is signature required.
    */
    'requiresSignature'?: boolean;
    /**
    * Does the electronic channel require authentication.
    */
    'requiresAuthentication'?: boolean;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachmentWithType>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification.
    */
    'accessibilityClassification'?: Array<VmOpenApiAccessibilityClassification>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V10VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;
    /**
    * List of ontology terms related to the all service connections.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "signatureQuantity",
            "baseName": "signatureQuantity",
            "type": "number"
        },
        {
            "name": "requiresSignature",
            "baseName": "requiresSignature",
            "type": "boolean"
        },
        {
            "name": "requiresAuthentication",
            "baseName": "requiresAuthentication",
            "type": "boolean"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachmentWithType>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiElectronicChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of electronic channel for IN api
*/
export class V10VmOpenApiElectronicChannelIn {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV organization identifier of organization responsible for this channel.
    */
    'organizationId': string;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel names.
    */
    'serviceChannelNames': Array<VmOpenApiLanguageItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * How many signatures are required (number). Required if RequiresSignature is true.
    */
    'signatureQuantity'?: string;
    /**
    * Signature required.
    */
    'requiresSignature'?: boolean;
    /**
    * Does the service require authentication.
    */
    'requiresAuthentication': boolean;
    /**
    * List of localized urls.
    */
    'webPage': Array<VmOpenApiLanguageItem>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachment>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages': Array<string>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification.
    */
    'accessibilityClassification': Array<VmOpenApiAccessibilityClassification>;
    /**
    * Service channel publishing status. Values: Draft or Published.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * List of related services (GUID).
    */
    'services'?: Array<string>;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "signatureQuantity",
            "baseName": "signatureQuantity",
            "type": "string"
        },
        {
            "name": "requiresSignature",
            "baseName": "requiresSignature",
            "type": "boolean"
        },
        {
            "name": "requiresAuthentication",
            "baseName": "requiresAuthentication",
            "type": "boolean"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachment>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiElectronicChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of electronic channel for IN api - base
*/
export class V10VmOpenApiElectronicChannelInBase {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * PTV organization identifier for organization responsible for this service channel.
    */
    'organizationId'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * Localized list of service channel names.
    */
    'serviceChannelNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * How many signatures are required (number). Required if RequiresSignature is true.
    */
    'signatureQuantity'?: string;
    /**
    * Signature required.
    */
    'requiresSignature'?: boolean;
    /**
    * Does the service require authentication.
    */
    'requiresAuthentication': boolean;
    /**
    * List of localized urls.
    */
    'webPage'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachment>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification.
    */
    'accessibilityClassification'?: Array<VmOpenApiAccessibilityClassification>;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * Set to true to delete all existing attachments. The attachments collection should be empty when this property is set to true.
    */
    'deleteAllAttachments'?: boolean;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;
    /**
    * Set to true to delete all existing web pages for the service channel. The WebPages collection should be empty when this property is set to true.
    */
    'deleteAllWebPages'?: boolean;
    /**
    * Set to true to delete all existing service hours for the service channel. The ServiceHours collection should be empty when this property is set to true.
    */
    'deleteAllServiceHours'?: boolean;
    /**
    * Set to true to delete all existing support email addresses for the service channel. The SupportEmails collection should be empty when this property is set to true.
    */
    'deleteAllSupportEmails'?: boolean;
    /**
    * Set to true to delete all existing support phone numbers for the service channel. The SupportPhones collection should be empty when this property is set to true.
    */
    'deleteAllSupportPhones'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "signatureQuantity",
            "baseName": "signatureQuantity",
            "type": "string"
        },
        {
            "name": "requiresSignature",
            "baseName": "requiresSignature",
            "type": "boolean"
        },
        {
            "name": "requiresAuthentication",
            "baseName": "requiresAuthentication",
            "type": "boolean"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachment>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "deleteAllAttachments",
            "baseName": "deleteAllAttachments",
            "type": "boolean"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "deleteAllWebPages",
            "baseName": "deleteAllWebPages",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        },
        {
            "name": "deleteAllSupportEmails",
            "baseName": "deleteAllSupportEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllSupportPhones",
            "baseName": "deleteAllSupportPhones",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiElectronicChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of general description
*/
export class V10VmOpenApiGeneralDescription {
    /**
    * Entity Guid identifier.
    */
    'id'?: string;
    /**
    * List of localized names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'names'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized descriptions. Possible type values are: Description, Summary, BackgroundDescription, UserInstruction, GeneralDescriptionTypeAdditionalInformation, ChargeTypeAdditionalInfo, DeadLine, ProcessingTime, ValidityTime.
    */
    'descriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service classes.
    */
    'serviceClasses'?: Array<V7VmOpenApiFintoItemWithDescription>;
    /**
    * List of ontology terms.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of target groups.
    */
    'targetGroups'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of life events.
    */
    'lifeEvents'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of industrial classes.
    */
    'industrialClasses'?: Array<V4VmOpenApiFintoItem>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * Service type. Possible values in version 8 are: Service, PermitOrObligation or ProfessionalQualification.  In version 7: Service, PermissionAndObligation or ProfessionalQualifications.  In older versions: Service or PermissionAndObligation.
    */
    'type'?: string;
    /**
    * Service charge type. Possible values are:  Chargeable or FreeOfCharge.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * Laws that a general description is based on.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * General description type. Possible values in version 9 are: Municipality, BusinessSubregion, AlandIsland, PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.  In version 8: Municipality, BusinessSubregion, AlandIsland.  In older versions: Default general description is Municipality.
    */
    'generalDescriptionType'?: string;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * List of linked service channels including relationship data.
    */
    'serviceChannels'?: Array<V6VmOpenApiServiceServiceChannel>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "descriptions",
            "baseName": "descriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<V7VmOpenApiFintoItemWithDescription>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "generalDescriptionType",
            "baseName": "generalDescriptionType",
            "type": "string"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "serviceChannels",
            "baseName": "serviceChannels",
            "type": "Array<V6VmOpenApiServiceServiceChannel>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiGeneralDescription.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of general description for IN api (POST)
*/
export class V10VmOpenApiGeneralDescriptionIn {
    /**
    * List of name entities. Possible type values are: Name, AlternativeName.   Sample single JSON object: {\"language\": \"fi\", \"value\": \"Perhepäivähoito esiopetusikäisille\", \"type\": \"Name\"}.
    */
    'names': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of description entities. Requires two entities where ones type is \"Description\" or \"BackgroundDescription\" and the other ones type is \"Summary\".  Sample single JSON object: {\"language\": \"fi\", \"value\": \"Lyhyen kuvauksen kuvaus esimerkki teksti.\", \"type\": \"Summary\"}.  Other optional description types are UserInstruction, ChargeTypeAdditionalInfo, DeadLine, ProcessingTime, ValidityTime.
    */
    'descriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service class urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v1065
    */
    'serviceClasses': Array<string>;
    /**
    * List of ontology term urls. Sample url: http://www.yso.fi/onto/koko/p2435
    */
    'ontologyTerms': Array<string>;
    /**
    * List of target group urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v2004
    */
    'targetGroups': Array<string>;
    /**
    * List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017
    */
    'lifeEvents'?: Array<string>;
    /**
    * List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).
    */
    'industrialClasses'?: Array<string>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.
    */
    'type'?: string;
    /**
    * Service charge type. Possible values are:  Chargeable or FreeOfCharge.
    */
    'serviceChargeType'?: string;
    /**
    * Laws that a general description is based on.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * General description type. Possible values are: Municipality, BusinessSubregion, AlandIsland.
    */
    'generalDescriptionType': string;
    /**
    * Publishing status. Possible values are: Draft or Published.
    */
    'publishingStatus': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "descriptions",
            "baseName": "descriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<string>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<string>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<string>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<string>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<string>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "generalDescriptionType",
            "baseName": "generalDescriptionType",
            "type": "string"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiGeneralDescriptionIn.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of general description for IN api base (PUT)
*/
export class V10VmOpenApiGeneralDescriptionInBase {
    /**
    * List of localized names. Possible type values are: Name, AlternativeName.
    */
    'names'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized descriptions. Possible type values are: Description, Summary, BackgroundDescription, UserInstruction, GeneralDescriptionTypeAdditionalInformation, ChargeTypeAdditionalInfo, DeadLine, ProcessingTime, ValidityTime.
    */
    'descriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service class urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v1065
    */
    'serviceClasses'?: Array<string>;
    /**
    * List of ontology term urls. Sample url: http://www.yso.fi/onto/koko/p2435
    */
    'ontologyTerms'?: Array<string>;
    /**
    * List of target group urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v2004
    */
    'targetGroups'?: Array<string>;
    /**
    * List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017
    */
    'lifeEvents'?: Array<string>;
    /**
    * List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).
    */
    'industrialClasses'?: Array<string>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.
    */
    'type'?: string;
    /**
    * Service charge type. Possible values are:  Chargeable or FreeOfCharge.
    */
    'serviceChargeType'?: string;
    /**
    * Laws that a general description is based on.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * General description type. Possible values in version 9 are: Municipality, BusinessSubregion, AlandIsland, PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.  In version 8: Municipality, BusinessSubregion, AlandIsland.  In older versions: Default general description is Municipality.
    */
    'generalDescriptionType'?: string;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).
    */
    'deleteAllLifeEvents'?: boolean;
    /**
    * Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).
    */
    'deleteAllIndustrialClasses'?: boolean;
    /**
    * Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).
    */
    'deleteAllLaws'?: boolean;
    /**
    * Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).
    */
    'deleteServiceChargeType'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "descriptions",
            "baseName": "descriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<string>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<string>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<string>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<string>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<string>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "generalDescriptionType",
            "baseName": "generalDescriptionType",
            "type": "string"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "deleteAllLifeEvents",
            "baseName": "deleteAllLifeEvents",
            "type": "boolean"
        },
        {
            "name": "deleteAllIndustrialClasses",
            "baseName": "deleteAllIndustrialClasses",
            "type": "boolean"
        },
        {
            "name": "deleteAllLaws",
            "baseName": "deleteAllLaws",
            "type": "boolean"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiGeneralDescriptionInBase.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of organization
*/
export class V10VmOpenApiOrganization {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * Organization external system identifier. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\"
    */
    'oid'?: string;
    /**
    * Organizations parent organization identifier if exists.
    */
    'parentOrganizationId'?: string;
    /**
    * Organizations root organization identifier if exists.
    */
    'organizationRootId'?: string;
    /**
    * Municipality including municipality code and a localized list of municipality names.
    */
    'municipality'?: VmOpenApiMunicipality;
    /**
    * Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).
    */
    'organizationType'?: string;
    /**
    * Organization business code (Y-tunnus).
    */
    'businessCode'?: string;
    /**
    * Organization business name (name used for business code).
    */
    'businessName'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.
    */
    'displayNameType'?: Array<VmOpenApiNameTypeByLanguage>;
    /**
    * Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
    */
    'areaType'?: string;
    /**
    * List of organization areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * Localized list of organization descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'organizationDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of email addresses.
    */
    'emails'?: Array<V4VmOpenApiEmail>;
    /**
    * List of organizations phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of organizations web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of organizations addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddress>;
    /**
    * List of organizations electronic invoicing information.
    */
    'electronicInvoicings'?: Array<VmOpenApiOrganizationEInvoicing>;
    /**
    * Publishing status (Draft, Published, Deleted or Modified).
    */
    'publishingStatus'?: string;
    /**
    * List of organizations services.
    */
    'services'?: Array<V10VmOpenApiOrganizationService>;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * The sub organizations
    */
    'subOrganizations'?: Array<VmOpenApiItem>;
    /**
    * Responsible organization identifier if exists.
    */
    'responsibleOrganizationId'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "parentOrganizationId",
            "baseName": "parentOrganizationId",
            "type": "string"
        },
        {
            "name": "organizationRootId",
            "baseName": "organizationRootId",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "VmOpenApiMunicipality"
        },
        {
            "name": "organizationType",
            "baseName": "organizationType",
            "type": "string"
        },
        {
            "name": "businessCode",
            "baseName": "businessCode",
            "type": "string"
        },
        {
            "name": "businessName",
            "baseName": "businessName",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "organizationDescriptions",
            "baseName": "organizationDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<V4VmOpenApiEmail>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddress>"
        },
        {
            "name": "electronicInvoicings",
            "baseName": "electronicInvoicings",
            "type": "Array<VmOpenApiOrganizationEInvoicing>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiOrganizationService>"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "subOrganizations",
            "baseName": "subOrganizations",
            "type": "Array<VmOpenApiItem>"
        },
        {
            "name": "responsibleOrganizationId",
            "baseName": "responsibleOrganizationId",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiOrganization.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of organization service
*/
export class V10VmOpenApiOrganizationService {
    /**
    * Service identifier and name.
    */
    'service'?: VmOpenApiItem;
    /**
    * Role type, valid values Responsible or Producer. In version 7 and upper also OtherResponsible role type is used.
    */
    'roleType': string;
    /**
    * Provision type, valid values SelfProduced, PurchaseServices, Other or VoucherServices. Required if RoleType value is Producer.
    */
    'provisionType'?: string;
    /**
    * Localized list of additional information.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "service",
            "baseName": "service",
            "type": "VmOpenApiItem"
        },
        {
            "name": "roleType",
            "baseName": "roleType",
            "type": "string"
        },
        {
            "name": "provisionType",
            "baseName": "provisionType",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiOrganizationService.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of phone channel
*/
export class V10VmOpenApiPhoneChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V10VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;
    /**
    * List of ontology terms related to the all service connections.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiPhoneChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of printable form channel
*/
export class V10VmOpenApiPrintableFormChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of localized form identifier. One per language.
    */
    'formIdentifier'?: Array<VmOpenApiLanguageItem>;
    /**
    * Form delivery addresses.
    */
    'deliveryAddresses'?: Array<V8VmOpenApiAddressDelivery>;
    /**
    * List of localized channel urls.
    */
    'channelUrls'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachmentWithType>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V10VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;
    /**
    * List of ontology terms related to the all service connections.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "formIdentifier",
            "baseName": "formIdentifier",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "deliveryAddresses",
            "baseName": "deliveryAddresses",
            "type": "Array<V8VmOpenApiAddressDelivery>"
        },
        {
            "name": "channelUrls",
            "baseName": "channelUrls",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachmentWithType>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiPrintableFormChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of printable from channel for IN api
*/
export class V10VmOpenApiPrintableFormChannelIn {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV organization identifier of organization responsible for this channel.
    */
    'organizationId': string;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel names.
    */
    'serviceChannelNames': Array<VmOpenApiLanguageItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of localized form identifiers. One per language.
    */
    'formIdentifier'?: Array<VmOpenApiLanguageItem>;
    /**
    * Gets or sets the delivery addresses.
    */
    'deliveryAddresses'?: Array<V8VmOpenApiAddressDeliveryIn>;
    /**
    * List of localized urls. Possible type values are: PDF, DOC, Excel.
    */
    'channelUrls': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachment>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages': Array<string>;
    /**
    * Service channel publishing status. Values: Draft or Published.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * List of related services (GUID).
    */
    'services'?: Array<string>;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "formIdentifier",
            "baseName": "formIdentifier",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "deliveryAddresses",
            "baseName": "deliveryAddresses",
            "type": "Array<V8VmOpenApiAddressDeliveryIn>"
        },
        {
            "name": "channelUrls",
            "baseName": "channelUrls",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachment>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiPrintableFormChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of printable form channel for IN api - base
*/
export class V10VmOpenApiPrintableFormChannelInBase {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * PTV organization identifier for organization responsible for this service channel.
    */
    'organizationId'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * Localized list of service channel names.
    */
    'serviceChannelNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of localized form identifiers. One per language.
    */
    'formIdentifier'?: Array<VmOpenApiLanguageItem>;
    /**
    * Gets or sets the delivery addresses.
    */
    'deliveryAddresses'?: Array<V8VmOpenApiAddressDeliveryIn>;
    /**
    * List of localized channel urls. Possible type values are: PDF, DOC, Excel.
    */
    'channelUrls'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachment>;
    /**
    * Set to true to delete all existing delivery addresses for the service channel. The DeliveryAddresses should be empty when this property is set to true.
    */
    'deleteAllDeliveryAddresses'?: boolean;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * Set to true to delete all existing channel urls for the service channel. The ChannelUrls collection should be empty when this property is set to true.
    */
    'deleteAllChannelUrls'?: boolean;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * Set to true to delete all existing attachments for the service channel. The Attachments collection should be empty when this property is set to true.
    */
    'deleteAllAttachments'?: boolean;
    /**
    * Set to true to delete all existing form identifiers for the service channel. The form identifiers collection should be empty when this property is set to true.
    */
    'deleteAllFormIdentifiers'?: boolean;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;
    /**
    * Set to true to delete all existing support email addresses for the service channel. The SupportEmails collection should be empty when this property is set to true.
    */
    'deleteAllSupportEmails'?: boolean;
    /**
    * Set to true to delete all existing support phone numbers for the service channel. The SupportPhones collection should be empty when this property is set to true.
    */
    'deleteAllSupportPhones'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "formIdentifier",
            "baseName": "formIdentifier",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "deliveryAddresses",
            "baseName": "deliveryAddresses",
            "type": "Array<V8VmOpenApiAddressDeliveryIn>"
        },
        {
            "name": "channelUrls",
            "baseName": "channelUrls",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachment>"
        },
        {
            "name": "deleteAllDeliveryAddresses",
            "baseName": "deleteAllDeliveryAddresses",
            "type": "boolean"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "deleteAllChannelUrls",
            "baseName": "deleteAllChannelUrls",
            "type": "boolean"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "deleteAllAttachments",
            "baseName": "deleteAllAttachments",
            "type": "boolean"
        },
        {
            "name": "deleteAllFormIdentifiers",
            "baseName": "deleteAllFormIdentifiers",
            "type": "boolean"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "deleteAllSupportEmails",
            "baseName": "deleteAllSupportEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllSupportPhones",
            "baseName": "deleteAllSupportPhones",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiPrintableFormChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of service
*/
export class V10VmOpenApiService {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV identifier for linked general description.
    */
    'generalDescriptionId'?: string;
    /**
    * Service sub-type. It is used for SOTE and its taken from GeneralDescription's generalDescriptionType. Possible values are: PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.
    */
    'subType'?: string;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification. In version 7 Service, PermissionAndObligation or ProfessionalQualifications.
    */
    'type'?: string;
    /**
    * Service funding type. Possible values are: PubliclyFunded or MarketFunded.
    */
    'fundingType'?: string;
    /**
    * List of localized service names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable or FreeOfCharge.  In version 7: Charged or Free.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
    */
    'serviceChargeType'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  In version 7: Description, ShortDescription, ServiceUserInstruction, ValidityTimeAdditionalInfo, ProcessingTimeAdditionalInfo, DeadLineAdditionalInfo, ChargeTypeAdditionalInfo, ServiceTypeAdditionalInfo.
    */
    'serviceDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service languages.
    */
    'languages'?: Array<string>;
    /**
    * List of service classes related to the service.
    */
    'serviceClasses'?: Array<V7VmOpenApiFintoItemWithDescription>;
    /**
    * List of ontology terms related to the service.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of target groups related to the service.
    */
    'targetGroups'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of life events  related to the service.
    */
    'lifeEvents'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of industrial classes related to the service.
    */
    'industrialClasses'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of laws related to the service.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * List of localized service keywords.
    */
    'keywords'?: Array<VmOpenApiLanguageItem>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of linked service channels including relationship data.
    */
    'serviceChannels'?: Array<V10VmOpenApiServiceServiceChannel>;
    /**
    * List of organizations, responsible and producer organizations of the service.
    */
    'organizations'?: Array<V6VmOpenApiServiceOrganization>;
    /**
    * Indicates if service vouchers are used in the service.
    */
    'serviceVouchersInUse'?: boolean;
    /**
    * List of service vouchers.
    */
    'serviceVouchers'?: Array<V9VmOpenApiServiceVoucher>;
    /**
    * List of service collections that the service has been linked to
    */
    'serviceCollections'?: Array<VmOpenApiServiceServiceCollection>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "generalDescriptionId",
            "baseName": "generalDescriptionId",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "fundingType",
            "baseName": "fundingType",
            "type": "string"
        },
        {
            "name": "serviceNames",
            "baseName": "serviceNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "serviceDescriptions",
            "baseName": "serviceDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<V7VmOpenApiFintoItemWithDescription>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "serviceChannels",
            "baseName": "serviceChannels",
            "type": "Array<V10VmOpenApiServiceServiceChannel>"
        },
        {
            "name": "organizations",
            "baseName": "organizations",
            "type": "Array<V6VmOpenApiServiceOrganization>"
        },
        {
            "name": "serviceVouchersInUse",
            "baseName": "serviceVouchersInUse",
            "type": "boolean"
        },
        {
            "name": "serviceVouchers",
            "baseName": "serviceVouchers",
            "type": "Array<V9VmOpenApiServiceVoucher>"
        },
        {
            "name": "serviceCollections",
            "baseName": "serviceCollections",
            "type": "Array<VmOpenApiServiceServiceCollection>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiService.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service channel service V10
*/
export class V10VmOpenApiServiceChannelService {
    /**
    * Service channel identifier and name.
    */
    'service'?: VmOpenApiItem;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<V9VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Contact details for connection.
    */
    'contactDetails'?: V9VmOpenApiContactDetails;
    /**
    * List of digital authorizations related to the service.
    */
    'digitalAuthorizations'?: Array<V4VmOpenApiFintoItem>;
    /**
    * Date when connection was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "service",
            "baseName": "service",
            "type": "VmOpenApiItem"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<V9VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetails"
        },
        {
            "name": "digitalAuthorizations",
            "baseName": "digitalAuthorizations",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiServiceChannelService.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service channels
*/
export class V10VmOpenApiServiceChannels {
    /**
    * Electronic channel.
    */
    'electronicChannel'?: V10VmOpenApiElectronicChannel;
    /**
    * Phone channel.
    */
    'phoneChannel'?: V10VmOpenApiPhoneChannel;
    /**
    * Printable form channel.
    */
    'printableFormChannel'?: V10VmOpenApiPrintableFormChannel;
    /**
    * Location channel.
    */
    'locationChannel'?: V10VmOpenApiServiceLocationChannel;
    /**
    * Web page channel.
    */
    'webPageChannel'?: V10VmOpenApiWebPageChannel;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "electronicChannel",
            "baseName": "electronicChannel",
            "type": "V10VmOpenApiElectronicChannel"
        },
        {
            "name": "phoneChannel",
            "baseName": "phoneChannel",
            "type": "V10VmOpenApiPhoneChannel"
        },
        {
            "name": "printableFormChannel",
            "baseName": "printableFormChannel",
            "type": "V10VmOpenApiPrintableFormChannel"
        },
        {
            "name": "locationChannel",
            "baseName": "locationChannel",
            "type": "V10VmOpenApiServiceLocationChannel"
        },
        {
            "name": "webPageChannel",
            "baseName": "webPageChannel",
            "type": "V10VmOpenApiWebPageChannel"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiServiceChannels.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of service location channel
*/
export class V10VmOpenApiServiceLocationChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Service channel OID. Must match the regex @\"^[A-Za-z0-9.-]*$\".
    */
    'oid'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of ServiceChannelNames.
    */
    'displayNameType'?: Array<VmOpenApiNameTypeByLanguage>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of phone numbers for the service channel. Includes also fax numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List email addresses for the service channel.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddressLocation>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V10VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;
    /**
    * List of ontology terms related to the all service connections.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressLocation>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiServiceLocationChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of service service channel
*/
export class V10VmOpenApiServiceServiceChannel {
    /**
    * Service channel identifier and name.
    */
    'serviceChannel'?: VmOpenApiItem;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<V9VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Contact details for connection.
    */
    'contactDetails'?: V9VmOpenApiContactDetails;
    /**
    * List of digital authorizations related to the service.
    */
    'digitalAuthorizations'?: Array<V4VmOpenApiFintoItem>;
    /**
    * Date when connection was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannel",
            "baseName": "serviceChannel",
            "type": "VmOpenApiItem"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<V9VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetails"
        },
        {
            "name": "digitalAuthorizations",
            "baseName": "digitalAuthorizations",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiServiceServiceChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of web page channel
*/
export class V10VmOpenApiWebPageChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification level.
    */
    'accessibilityClassification'?: Array<VmOpenApiAccessibilityClassification>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V10VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Sote organization that is responsible for the service channel. Notice! At the moment always empty - the property is a placeholder for later use.
    */
    'responsibleSoteOrganization'?: string;
    /**
    * List of ontology terms related to the all service connections.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V10VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "responsibleSoteOrganization",
            "baseName": "responsibleSoteOrganization",
            "type": "string"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiWebPageChannel.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of web page channel for IN api
*/
export class V10VmOpenApiWebPageChannelIn {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV organization identifier of organization responsible for this channel.
    */
    'organizationId': string;
    /**
    * List of localized service channel descriptions. Possible type values are: Summary, Description.
    */
    'serviceChannelDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel names.
    */
    'serviceChannelNames': Array<VmOpenApiLanguageItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of localized urls.
    */
    'webPage': Array<VmOpenApiLanguageItem>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages': Array<string>;
    /**
    * The accessibility classification.
    */
    'accessibilityClassification': Array<VmOpenApiAccessibilityClassification>;
    /**
    * Service channel publishing status. Values: Draft or Published.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * List of related services (GUID).
    */
    'services'?: Array<string>;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiWebPageChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V10 - View Model of web page channel for IN api - base
*/
export class V10VmOpenApiWebPageChannelInBase {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * List of localized service channel descriptions. Possible type values are: Summary, Description.
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * PTV organization identifier for organization responsible for this service channel.
    */
    'organizationId'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * Localized list of service channel names.
    */
    'serviceChannelNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of localized urls.
    */
    'webPage'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * The accessibility classification.
    */
    'accessibilityClassification'?: Array<VmOpenApiAccessibilityClassification>;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;
    /**
    * Set to true to delete all existing support email addresses for the service channel. The SupportEmails collection should be empty when this property is set to true.
    */
    'deleteAllSupportEmails'?: boolean;
    /**
    * Set to true to delete all existing support phone numbers for the service channel. The SupportPhones collection should be empty when this property is set to true.
    */
    'deleteAllSupportPhones'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "accessibilityClassification",
            "baseName": "accessibilityClassification",
            "type": "Array<VmOpenApiAccessibilityClassification>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "deleteAllSupportEmails",
            "baseName": "deleteAllSupportEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllSupportPhones",
            "baseName": "deleteAllSupportPhones",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V10VmOpenApiWebPageChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API V3 - View Model of guid page
*/
export class V3VmOpenApiGuidPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiItem>"
        }    ];

    static getAttributeTypeMap() {
        return V3VmOpenApiGuidPage.attributeTypeMap;
    }
}

/**
* OPEN API V4 - View Model of email
*/
export class V4VmOpenApiEmail {
    /**
    * Email address description.
    */
    'description'?: string;
    /**
    * Localized value corresponding to the Language property value.
    */
    'value': string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiEmail.attributeTypeMap;
    }
}

/**
* OPEN API V4 - View Model of finto item
*/
export class V4VmOpenApiFintoItem {
    /**
    * List of localized entity names.
    */
    'name'?: Array<VmOpenApiLanguageItem>;
    /**
    * Entity code.
    */
    'code'?: string;
    /**
    * Ontology term type.
    */
    'ontologyType'?: string;
    /**
    * Entity uri.
    */
    'uri'?: string;
    /**
    * Entity parent identifier.
    */
    'parentId'?: string;
    /**
    * Entity parent uri.
    */
    'parentUri'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "ontologyType",
            "baseName": "ontologyType",
            "type": "string"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        },
        {
            "name": "parentId",
            "baseName": "parentId",
            "type": "string"
        },
        {
            "name": "parentUri",
            "baseName": "parentUri",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiFintoItem.attributeTypeMap;
    }
}

/**
* OPEN API V4 - View Model of law
*/
export class V4VmOpenApiLaw {
    /**
    * List of localized law names.
    */
    'names'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized web page urls.
    */
    'webPages': Array<V4VmOpenApiWebPage>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V4VmOpenApiWebPage>"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiLaw.attributeTypeMap;
    }
}

/**
* OPEN API V4 - View Model of phone
*/
export class V4VmOpenApiPhone {
    /**
    * Additional information.
    */
    'additionalInformation'?: string;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other.
    */
    'serviceChargeType'?: string;
    /**
    * Charge description.
    */
    'chargeDescription'?: string;
    /**
    * Prefix for the phone number.
    */
    'prefixNumber'?: string;
    /**
    * Defines if number is Finnish service number. If true prefix number can be left empty.
    */
    'isFinnishServiceNumber'?: boolean;
    /**
    * Phone number.
    */
    'number': string;
    /**
    * Language of this object. Valid values are: fi, sv or en.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "chargeDescription",
            "baseName": "chargeDescription",
            "type": "string"
        },
        {
            "name": "prefixNumber",
            "baseName": "prefixNumber",
            "type": "string"
        },
        {
            "name": "isFinnishServiceNumber",
            "baseName": "isFinnishServiceNumber",
            "type": "boolean"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiPhone.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of phone. Version 4
*/
export class V4VmOpenApiPhoneSimple {
    /**
    * Prefix for the phone number.
    */
    'prefixNumber'?: string;
    /**
    * Defines if number is Finnish service number. If true prefix number can be left empty.
    */
    'isFinnishServiceNumber'?: boolean;
    /**
    * Phone number.
    */
    'number': string;
    /**
    * Language of this object. Valid values are: fi, sv or en.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "prefixNumber",
            "baseName": "prefixNumber",
            "type": "string"
        },
        {
            "name": "isFinnishServiceNumber",
            "baseName": "isFinnishServiceNumber",
            "type": "boolean"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiPhoneSimple.attributeTypeMap;
    }
}

/**
* OPEN API V4 - View Model of phone with type
*/
export class V4VmOpenApiPhoneWithType {
    /**
    * Phone number type (Phone, Sms or Fax).
    */
    'type': string;
    /**
    * Additional information.
    */
    'additionalInformation'?: string;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other.
    */
    'serviceChargeType'?: string;
    /**
    * Charge description.
    */
    'chargeDescription'?: string;
    /**
    * Prefix for the phone number.
    */
    'prefixNumber'?: string;
    /**
    * Defines if number is Finnish service number. If true prefix number can be left empty.
    */
    'isFinnishServiceNumber'?: boolean;
    /**
    * Phone number.
    */
    'number': string;
    /**
    * Language of this object. Valid values are: fi, sv or en.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "chargeDescription",
            "baseName": "chargeDescription",
            "type": "string"
        },
        {
            "name": "prefixNumber",
            "baseName": "prefixNumber",
            "type": "string"
        },
        {
            "name": "isFinnishServiceNumber",
            "baseName": "isFinnishServiceNumber",
            "type": "boolean"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiPhoneWithType.attributeTypeMap;
    }
}

/**
* Open API web page model.
*/
export class V4VmOpenApiWebPage {
    /**
    * Web page url.
    */
    'url': string;
    /**
    * Name of the web page.
    */
    'value'?: string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V4VmOpenApiWebPage.attributeTypeMap;
    }
}

/**
* OPEN API V6 - View Model of service organization
*/
export class V6VmOpenApiServiceOrganization {
    /**
    * Service channel identifier and name.
    */
    'organization'?: VmOpenApiItem;
    /**
    * Role type, valid values Responsible or Producer. In version 7 and upper also OtherResponsible role type is used.
    */
    'roleType': string;
    /**
    * Provision type, valid values for version 8 are SelfProducedServices, ProcuredServices or Other.  For older versions valid values are SelfProduced, PurchaseServices or Other.
    */
    'provisionType'?: string;
    /**
    * Localized list of additional information.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "organization",
            "baseName": "organization",
            "type": "VmOpenApiItem"
        },
        {
            "name": "roleType",
            "baseName": "roleType",
            "type": "string"
        },
        {
            "name": "provisionType",
            "baseName": "provisionType",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V6VmOpenApiServiceOrganization.attributeTypeMap;
    }
}

/**
* OPEN API V6 - View Model of service channel
*/
export class V6VmOpenApiServiceServiceChannel {
    /**
    * Service channel identifier and name.
    */
    'serviceChannel'?: VmOpenApiItem;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of digital authorizations related to the service.
    */
    'digitalAuthorizations'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannel",
            "baseName": "serviceChannel",
            "type": "VmOpenApiItem"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "digitalAuthorizations",
            "baseName": "digitalAuthorizations",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V6VmOpenApiServiceServiceChannel.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of address
*/
export class V7VmOpenApiAddressContact {
    /**
    * Address type, Postal.
    */
    'type'?: string;
    /**
    * Address sub type, Street, PostOfficeBox or Abroad.
    */
    'subType'?: string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBox;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinates;
    /**
    * Localized list of foreign address information.
    */
    'locationAbroad'?: Array<VmOpenApiLanguageItem>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBox"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinates"
        },
        {
            "name": "locationAbroad",
            "baseName": "locationAbroad",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiAddressContact.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of address
*/
export class V7VmOpenApiAddressContactIn {
    /**
    * Address type, only Postal accepted.
    */
    'type': string;
    /**
    * Address sub type, Street, PostOfficeBox or Abroad.
    */
    'subType': string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBoxIn;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinatesIn;
    /**
    * Localized list of foreign address information.
    */
    'locationAbroad'?: Array<VmOpenApiLanguageItem>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBoxIn"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinatesIn"
        },
        {
            "name": "locationAbroad",
            "baseName": "locationAbroad",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiAddressContactIn.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of finto item with description
*/
export class V7VmOpenApiFintoItemWithDescription {
    /**
    * List of localized entity names.
    */
    'name'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized entity descriptions.
    */
    'description'?: Array<VmOpenApiLanguageItem>;
    /**
    * Entity code.
    */
    'code'?: string;
    /**
    * Ontology term type.
    */
    'ontologyType'?: string;
    /**
    * Entity uri.
    */
    'uri'?: string;
    /**
    * Entity parent identifier.
    */
    'parentId'?: string;
    /**
    * Entity parent uri.
    */
    'parentUri'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "ontologyType",
            "baseName": "ontologyType",
            "type": "string"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        },
        {
            "name": "parentId",
            "baseName": "parentId",
            "type": "string"
        },
        {
            "name": "parentUri",
            "baseName": "parentUri",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiFintoItemWithDescription.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of service collection
*/
export class V7VmOpenApiServiceCollection {
    /**
    * PTV service identifier.
    */
    'id'?: string;
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Main responsible organization Id
    */
    'mainResponsibleOrganization'?: string;
    /**
    * List of localized service collection names.
    */
    'serviceCollectionNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized service collection descriptions.
    */
    'serviceCollectionDescriptions'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of service collection services.
    */
    'services'?: Array<VmOpenApiServiceCollectionService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "mainResponsibleOrganization",
            "baseName": "mainResponsibleOrganization",
            "type": "string"
        },
        {
            "name": "serviceCollectionNames",
            "baseName": "serviceCollectionNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "serviceCollectionDescriptions",
            "baseName": "serviceCollectionDescriptions",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<VmOpenApiServiceCollectionService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiServiceCollection.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of service collection IN
*/
export class V7VmOpenApiServiceCollectionIn {
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Main responsible organization Id
    */
    'mainResponsibleOrganization': string;
    /**
    * List of localized service collection names.
    */
    'serviceCollectionNames': Array<VmOpenApiLanguageItem>;
    /**
    * List of localized service collection descriptions.
    */
    'serviceCollectionDescriptions': Array<VmOpenApiLanguageItem>;
    /**
    * List of service collection services.
    */
    'services'?: Array<string>;
    /**
    * Publishing status. Possible values are: Draft or Published.
    */
    'publishingStatus': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "mainResponsibleOrganization",
            "baseName": "mainResponsibleOrganization",
            "type": "string"
        },
        {
            "name": "serviceCollectionNames",
            "baseName": "serviceCollectionNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "serviceCollectionDescriptions",
            "baseName": "serviceCollectionDescriptions",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiServiceCollectionIn.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of service collection IN - base
*/
export class V7VmOpenApiServiceCollectionInBase {
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Main responsible organization Id
    */
    'mainResponsibleOrganization'?: string;
    /**
    * List of localized service collection names.
    */
    'serviceCollectionNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized service collection descriptions.
    */
    'serviceCollectionDescriptions'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of service collection services.
    */
    'services'?: Array<string>;
    /**
    * Set to true to delete all existing services (the services collection for this object should be empty collection when this option is used).
    */
    'deleteAllServices'?: boolean;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "mainResponsibleOrganization",
            "baseName": "mainResponsibleOrganization",
            "type": "string"
        },
        {
            "name": "serviceCollectionNames",
            "baseName": "serviceCollectionNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "serviceCollectionDescriptions",
            "baseName": "serviceCollectionDescriptions",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "deleteAllServices",
            "baseName": "deleteAllServices",
            "type": "boolean"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V7VmOpenApiServiceCollectionInBase.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of delivery address
*/
export class V8VmOpenApiAddressDelivery {
    /**
    * Address sub type, Street, PostOfficeBox or NoAddress.
    */
    'subType'?: string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBox;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreet;
    /**
    * Localized list of delivery address information.
    */
    'deliveryAddressInText'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized form receiver. One per language.
    */
    'receiver'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBox"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreet"
        },
        {
            "name": "deliveryAddressInText",
            "baseName": "deliveryAddressInText",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "receiver",
            "baseName": "receiver",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiAddressDelivery.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of delivery address
*/
export class V8VmOpenApiAddressDeliveryIn {
    /**
    * Address sub type, Street, PostOfficeBox or NoAddress.
    */
    'subType': string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBoxIn;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetIn;
    /**
    * Localized list of foreign address information.
    */
    'deliveryAddressInText'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized form receivers. One per language.
    */
    'formReceiver'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBoxIn"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetIn"
        },
        {
            "name": "deliveryAddressInText",
            "baseName": "deliveryAddressInText",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "formReceiver",
            "baseName": "formReceiver",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiAddressDeliveryIn.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of Daily opening hours
*/
export class V8VmOpenApiDailyOpeningTime {
    /**
    * Starts from weekday (e.g. Monday).
    */
    'dayFrom'?: string;
    /**
    * Ends to weekday (e.g. Monday).
    */
    'dayTo'?: string;
    /**
    * Start time for example 10:00.
    */
    'from': string;
    /**
    * End time for example 20:00.
    */
    'to': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "dayFrom",
            "baseName": "dayFrom",
            "type": "string"
        },
        {
            "name": "dayTo",
            "baseName": "dayTo",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiDailyOpeningTime.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization guid page
*/
export class V8VmOpenApiOrganizationGuidPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<V8VmOpenApiOrganizationItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<V8VmOpenApiOrganizationItem>"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiOrganizationGuidPage.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization item
*/
export class V8VmOpenApiOrganizationItem {
    /**
    * Organizations parent organization identifier if exists.
    */
    'parentOrganizationId'?: string;
    /**
    * Id of the item.
    */
    'id'?: string;
    /**
    * Name of the item.
    */
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "parentOrganizationId",
            "baseName": "parentOrganizationId",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiOrganizationItem.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of service hour
*/
export class V8VmOpenApiServiceHour {
    /**
    * Type of service hour. Valid values are: DaysOfTheWeek, Exceptional or OverMidnight.  In version 7 and older: Standard, Exception or Special.
    */
    'serviceHourType': string;
    /**
    * Date time where from this entry is valid.
    */
    'validFrom'?: Date;
    /**
    * Date time to this entry is valid.
    */
    'validTo'?: Date;
    /**
    * Set to true to present a time between the valid from and to times as closed.
    */
    'isClosed'?: boolean;
    /**
    * Set to true to present that this entry is valid for now.
    */
    'validForNow'?: boolean;
    /**
    * Localized list of additional information.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;
    /**
    * Gets or sets the opening hour.
    */
    'openingHour'?: Array<V8VmOpenApiDailyOpeningTime>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceHourType",
            "baseName": "serviceHourType",
            "type": "string"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "isClosed",
            "baseName": "isClosed",
            "type": "boolean"
        },
        {
            "name": "validForNow",
            "baseName": "validForNow",
            "type": "boolean"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "openingHour",
            "baseName": "openingHour",
            "type": "Array<V8VmOpenApiDailyOpeningTime>"
        }    ];

    static getAttributeTypeMap() {
        return V8VmOpenApiServiceHour.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of address
*/
export class V9VmOpenApiAddress {
    /**
    * Address type, Visiting or Postal.
    */
    'type'?: string;
    /**
    * Address sub type, Street, PostOfficeBox, Foreign or Other.
    */
    'subType'?: string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBox;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinates;
    /**
    * Address coordinates with additional information.
    */
    'otherAddress'?: VmOpenApiAddressOther;
    /**
    * Localized list of foreign address information.
    */
    'foreignAddress'?: Array<VmOpenApiLanguageItem>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBox"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinates"
        },
        {
            "name": "otherAddress",
            "baseName": "otherAddress",
            "type": "VmOpenApiAddressOther"
        },
        {
            "name": "foreignAddress",
            "baseName": "foreignAddress",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiAddress.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of address
*/
export class V9VmOpenApiAddressIn {
    /**
    * Address type, Visiting or Postal.
    */
    'type': string;
    /**
    * Address sub type, Street, PostOfficeBox, Foreign or Other.
    */
    'subType': string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBoxIn;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinatesIn;
    /**
    * Address coordinates with additional information.
    */
    'otherAddress'?: VmOpenApiAddressOtherIn;
    /**
    * Localized list of foreign address information.
    */
    'foreignAddress'?: Array<VmOpenApiLanguageItem>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBoxIn"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinatesIn"
        },
        {
            "name": "otherAddress",
            "baseName": "otherAddress",
            "type": "VmOpenApiAddressOtherIn"
        },
        {
            "name": "foreignAddress",
            "baseName": "foreignAddress",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiAddressIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of address
*/
export class V9VmOpenApiAddressLocation {
    /**
    * Address type, Location or Postal.
    */
    'type'?: string;
    /**
    * Address sub type, Single, Street, PostOfficeBox, Abroad or Other.
    */
    'subType'?: string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBox;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinates;
    /**
    * Address coordinates with additional information.
    */
    'otherAddress'?: VmOpenApiAddressOther;
    /**
    * Localized list of foreign address information.
    */
    'locationAbroad'?: Array<VmOpenApiLanguageItem>;
    /**
    * Entrances for an address. Includes accessibility sentences.
    */
    'entrances'?: Array<V9VmOpenApiEntrance>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBox"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinates"
        },
        {
            "name": "otherAddress",
            "baseName": "otherAddress",
            "type": "VmOpenApiAddressOther"
        },
        {
            "name": "locationAbroad",
            "baseName": "locationAbroad",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "entrances",
            "baseName": "entrances",
            "type": "Array<V9VmOpenApiEntrance>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiAddressLocation.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of address
*/
export class V9VmOpenApiAddressLocationIn {
    /**
    * Address type, Location or Postal.
    */
    'type': string;
    /**
    * Address sub type, Single, Street, PostOfficeBox, Abroad or Other.
    */
    'subType': string;
    /**
    * Post office box address
    */
    'postOfficeBoxAddress'?: VmOpenApiAddressPostOfficeBoxIn;
    /**
    * Street address.
    */
    'streetAddress'?: VmOpenApiAddressStreetWithCoordinatesIn;
    /**
    * Address coordinates with additional information.
    */
    'otherAddress'?: VmOpenApiAddressOtherIn;
    /**
    * Localized list of foreign address information.
    */
    'locationAbroad'?: Array<VmOpenApiLanguageItem>;
    /**
    * Country code (ISO 3166-1 alpha-2), for example FI.
    */
    'country'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "postOfficeBoxAddress",
            "baseName": "postOfficeBoxAddress",
            "type": "VmOpenApiAddressPostOfficeBoxIn"
        },
        {
            "name": "streetAddress",
            "baseName": "streetAddress",
            "type": "VmOpenApiAddressStreetWithCoordinatesIn"
        },
        {
            "name": "otherAddress",
            "baseName": "otherAddress",
            "type": "VmOpenApiAddressOtherIn"
        },
        {
            "name": "locationAbroad",
            "baseName": "locationAbroad",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiAddressLocationIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation IN (PUT).
*/
export class V9VmOpenApiChannelServicesIn {
    /**
    * Set to true to delete all existing relations between defined service channel and services (the ServiceRelations collection for this object should be empty collection when this option is used).
    */
    'deleteAllServiceRelations'?: boolean;
    /**
    * Gets or sets the service relations.
    */
    'serviceRelations'?: Array<V9VmOpenApiServiceChannelServiceInBase>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deleteAllServiceRelations",
            "baseName": "deleteAllServiceRelations",
            "type": "boolean"
        },
        {
            "name": "serviceRelations",
            "baseName": "serviceRelations",
            "type": "Array<V9VmOpenApiServiceChannelServiceInBase>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiChannelServicesIn.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service location channel - base version
*/
export class V9VmOpenApiContactDetails {
    /**
    * List of connection related email addresses.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of connection related phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List of connection related web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V7VmOpenApiAddressContact>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V7VmOpenApiAddressContact>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiContactDetails.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of contact details (POST).
*/
export class V9VmOpenApiContactDetailsIn {
    /**
    * List of connection related email addresses.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of connection related phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of connection related fax numbers numbers.
    */
    'faxNumbers'?: Array<V4VmOpenApiPhoneSimple>;
    /**
    * List of connection related web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V7VmOpenApiAddressContactIn>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "faxNumbers",
            "baseName": "faxNumbers",
            "type": "Array<V4VmOpenApiPhoneSimple>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V7VmOpenApiAddressContactIn>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiContactDetailsIn.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of contact details (PUT) - base version
*/
export class V9VmOpenApiContactDetailsInBase {
    /**
    * List of connection related email addresses.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of connection related phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of connection related fax numbers numbers.
    */
    'faxNumbers'?: Array<V4VmOpenApiPhoneSimple>;
    /**
    * List of connection related web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V7VmOpenApiAddressContactIn>;
    /**
    * Gets or sets a value indicating whether all emails should be delted.
    */
    'deleteAllEmails'?: boolean;
    /**
    * Gets or sets a value indicating whether all phones should be delted.
    */
    'deleteAllPhones'?: boolean;
    /**
    * Gets or sets a value indicating whether all fax numbers should be delted.
    */
    'deleteAllFaxNumbers'?: boolean;
    /**
    * Gets or sets a value indicating whether all web pages should be delted.
    */
    'deleteAllWebPages'?: boolean;
    /**
    * Gets or sets a value indicating whether all addresses should be delted.
    */
    'deleteAllAddresses'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "faxNumbers",
            "baseName": "faxNumbers",
            "type": "Array<V4VmOpenApiPhoneSimple>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V7VmOpenApiAddressContactIn>"
        },
        {
            "name": "deleteAllEmails",
            "baseName": "deleteAllEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllPhones",
            "baseName": "deleteAllPhones",
            "type": "boolean"
        },
        {
            "name": "deleteAllFaxNumbers",
            "baseName": "deleteAllFaxNumbers",
            "type": "boolean"
        },
        {
            "name": "deleteAllWebPages",
            "baseName": "deleteAllWebPages",
            "type": "boolean"
        },
        {
            "name": "deleteAllAddresses",
            "baseName": "deleteAllAddresses",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiContactDetailsInBase.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of electronic channel
*/
export class V9VmOpenApiElectronicChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * How many signatures are required.
    */
    'signatureQuantity'?: number;
    /**
    * Is signature required.
    */
    'requiresSignature'?: boolean;
    /**
    * Does the electronic channel require authentication.
    */
    'requiresAuthentication'?: boolean;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachmentWithType>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification level.
    */
    'accessibilityClassificationLevel'?: string;
    /**
    * The web content accessibility level.
    */
    'wcagLevel'?: string;
    /**
    * List of accessibility web pages. One per language.
    */
    'accessibilityStatementWebPage'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V9VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "signatureQuantity",
            "baseName": "signatureQuantity",
            "type": "number"
        },
        {
            "name": "requiresSignature",
            "baseName": "requiresSignature",
            "type": "boolean"
        },
        {
            "name": "requiresAuthentication",
            "baseName": "requiresAuthentication",
            "type": "boolean"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachmentWithType>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassificationLevel",
            "baseName": "accessibilityClassificationLevel",
            "type": "string"
        },
        {
            "name": "wcagLevel",
            "baseName": "wcagLevel",
            "type": "string"
        },
        {
            "name": "accessibilityStatementWebPage",
            "baseName": "accessibilityStatementWebPage",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V9VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiElectronicChannel.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of entrance for address
*/
export class V9VmOpenApiEntrance {
    /**
    * List of localized service names.
    */
    'name'?: Array<VmOpenApiLanguageItem>;
    /**
    * Indicates if entrance is main entrance.
    */
    'isMainEntrance'?: boolean;
    /**
    * Location coordinates
    */
    'coordinates'?: VmOpenApiCoordinates;
    /**
    * Contact info
    */
    'contactInfo'?: VmOpenApiAccessibilityContactInfo;
    /**
    * List of accessibility sentences.
    */
    'accessibilitySentences'?: Array<VmOpenApiAccessibilitySentence>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "isMainEntrance",
            "baseName": "isMainEntrance",
            "type": "boolean"
        },
        {
            "name": "coordinates",
            "baseName": "coordinates",
            "type": "VmOpenApiCoordinates"
        },
        {
            "name": "contactInfo",
            "baseName": "contactInfo",
            "type": "VmOpenApiAccessibilityContactInfo"
        },
        {
            "name": "accessibilitySentences",
            "baseName": "accessibilitySentences",
            "type": "Array<VmOpenApiAccessibilitySentence>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiEntrance.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service channels
*/
export class V9VmOpenApiExtraType {
    /**
    * Type of the area (Asti).
    */
    'type'?: string;
    /**
    * Code of the extra type.   In Asti case the code can be DocumentReceived, GuidanceToOnlineSelfService, LostAndFound, OnlineSelfServicePoint,   OnsiteGuidance, OnsiteGuidanceByServiceAuthor or RemoteGuidance
    */
    'code'?: string;
    /**
    * List of localized entity names.
    */
    'name'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized extra type descriptions.
    */
    'description'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiExtraType.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of organization for IN api
*/
export class V9VmOpenApiOrganizationIn {
    /**
    * Organization external system identifier. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\"
    */
    'oid'?: string;
    /**
    * Municipality code (like 491 or 091).
    */
    'municipality'?: string;
    /**
    * Organization type (State, Municipality, RegionalOrganization, Organization, Company).
    */
    'organizationType': string;
    /**
    * Organization business code (Y-tunnus).
    */
    'businessCode'?: string;
    /**
    * Organization business name (name used for business code).
    */
    'businessName'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.
    */
    'displayNameType': Array<VmOpenApiNameTypeByLanguage>;
    /**
    * Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
    */
    'areaType'?: string;
    /**
    * Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).
    */
    'subAreaType'?: string;
    /**
    * Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.
    */
    'areas'?: Array<string>;
    /**
    * Localized list of organization descriptions. Possible type values are: Description, Summary.
    */
    'organizationDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of email addresses.
    */
    'emails'?: Array<V4VmOpenApiEmail>;
    /**
    * List of organizations phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddressIn>;
    /**
    * List of organizations web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of organizations electronic invoicing information.
    */
    'electronicInvoicings'?: Array<VmOpenApiOrganizationEInvoicing>;
    /**
    * Publishing status (Draft or Published).
    */
    'publishingStatus': string;
    /**
    * Parent organization identifier.
    */
    'parentOrganizationId'?: string;
    /**
    * Responsible organization identifier.
    */
    'responsibleOrganizationId'?: string;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "string"
        },
        {
            "name": "organizationType",
            "baseName": "organizationType",
            "type": "string"
        },
        {
            "name": "businessCode",
            "baseName": "businessCode",
            "type": "string"
        },
        {
            "name": "businessName",
            "baseName": "businessName",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "subAreaType",
            "baseName": "subAreaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<string>"
        },
        {
            "name": "organizationDescriptions",
            "baseName": "organizationDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<V4VmOpenApiEmail>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressIn>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "electronicInvoicings",
            "baseName": "electronicInvoicings",
            "type": "Array<VmOpenApiOrganizationEInvoicing>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "parentOrganizationId",
            "baseName": "parentOrganizationId",
            "type": "string"
        },
        {
            "name": "responsibleOrganizationId",
            "baseName": "responsibleOrganizationId",
            "type": "string"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiOrganizationIn.attributeTypeMap;
    }
}

/**
* OPEN API V8 - View Model of organization for IN api - base
*/
export class V9VmOpenApiOrganizationInBase {
    /**
    * Organization external system identifier. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Organization OID. - must match the regex @\"^[A-Za-z0-9.-]*$\"
    */
    'oid'?: string;
    /**
    * Municipality code (like 491 or 091).
    */
    'municipality'?: string;
    /**
    * Organization type (State, Municipality, RegionalOrganization, Organization, Company, SotePublic, SotePrivate, Region).
    */
    'organizationType'?: string;
    /**
    * Organization business code (Y-tunnus).
    */
    'businessCode'?: string;
    /**
    * Organization business name (name used for business code).
    */
    'businessName'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of OrganizationNames.
    */
    'displayNameType'?: Array<VmOpenApiNameTypeByLanguage>;
    /**
    * Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
    */
    'areaType'?: string;
    /**
    * Sub area type (Municipality, Region, BusinessSubRegion, HospitalDistrict).
    */
    'subAreaType'?: string;
    /**
    * Area codes related to sub area type. For example if SubAreaType = Municipality, Areas-list need to include municipality codes like 491 or 091.
    */
    'areas'?: Array<string>;
    /**
    * Localized list of organization descriptions. Possible type values are: Description, Summary.
    */
    'organizationDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of email addresses.
    */
    'emails'?: Array<V4VmOpenApiEmail>;
    /**
    * List of organizations phone numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddressIn>;
    /**
    * List of organizations web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of organizations electronic invoicing information.
    */
    'electronicInvoicings'?: Array<VmOpenApiOrganizationEInvoicing>;
    /**
    * Organization publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Parent organization identifier.
    */
    'parentOrganizationId'?: string;
    /**
    * Set to true to delete all existing emails (the EmailAddresses collection for this object should be empty collection when this option is used).
    */
    'deleteAllEmails'?: boolean;
    /**
    * Set to true to delete all existing phone numbers (the PhoneNumbers collection for this object should be empty collection when this option is used).
    */
    'deleteAllPhones'?: boolean;
    /**
    * Set to true to delete all existing web pages (the WebPages collection for this object should be empty collection when this option is used).
    */
    'deleteAllWebPages'?: boolean;
    /**
    * Set to true to delete all existing addresses (the Addresses collection for this object should be empty collection when this option is used).
    */
    'deleteAllAddresses'?: boolean;
    /**
    * Set to true to delete all existing electronic invoicing addresses (the ElectronicInvoicings collection for this object should be empty collection when this option is used).
    */
    'deleteAllElectronicInvoicings'?: boolean;
    /**
    * Responsible organization identifier.
    */
    'responsibleOrganizationId'?: string;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "string"
        },
        {
            "name": "organizationType",
            "baseName": "organizationType",
            "type": "string"
        },
        {
            "name": "businessCode",
            "baseName": "businessCode",
            "type": "string"
        },
        {
            "name": "businessName",
            "baseName": "businessName",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "subAreaType",
            "baseName": "subAreaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<string>"
        },
        {
            "name": "organizationDescriptions",
            "baseName": "organizationDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<V4VmOpenApiEmail>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressIn>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "electronicInvoicings",
            "baseName": "electronicInvoicings",
            "type": "Array<VmOpenApiOrganizationEInvoicing>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "parentOrganizationId",
            "baseName": "parentOrganizationId",
            "type": "string"
        },
        {
            "name": "deleteAllEmails",
            "baseName": "deleteAllEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllPhones",
            "baseName": "deleteAllPhones",
            "type": "boolean"
        },
        {
            "name": "deleteAllWebPages",
            "baseName": "deleteAllWebPages",
            "type": "boolean"
        },
        {
            "name": "deleteAllAddresses",
            "baseName": "deleteAllAddresses",
            "type": "boolean"
        },
        {
            "name": "deleteAllElectronicInvoicings",
            "baseName": "deleteAllElectronicInvoicings",
            "type": "boolean"
        },
        {
            "name": "responsibleOrganizationId",
            "baseName": "responsibleOrganizationId",
            "type": "string"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiOrganizationInBase.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of phone channel
*/
export class V9VmOpenApiPhoneChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V9VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V9VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiPhoneChannel.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of phone channel for IN api
*/
export class V9VmOpenApiPhoneChannelIn {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV organization identifier of organization responsible for this channel.
    */
    'organizationId': string;
    /**
    * Localized list of service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * Localized list of service channel names.
    */
    'serviceChannelNames': Array<VmOpenApiLanguageItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of support phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List of localized urls.
    */
    'webPage'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages': Array<string>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * List of related services (GUID).
    */
    'services'?: Array<string>;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiPhoneChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V98 - View Model of phone channel for IN api - base
*/
export class V9VmOpenApiPhoneChannelInBase {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * PTV organization identifier for organization responsible for this service channel.
    */
    'organizationId'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * Localized list of service channel names.
    */
    'serviceChannelNames'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of support phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List of localized urls.
    */
    'webPage'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;
    /**
    * Set to true to delete all existing web pages for the service channel. The WebPages collection should be empty when this property is set to true.
    */
    'deleteAllWebPages'?: boolean;
    /**
    * Set to true to delete all existing service hours for the service channel. The ServiceHours collection should be empty when this property is set to true.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "webPage",
            "baseName": "webPage",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "deleteAllWebPages",
            "baseName": "deleteAllWebPages",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiPhoneChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of printable form channel
*/
export class V9VmOpenApiPrintableFormChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of localized form identifier. One per language.
    */
    'formIdentifier'?: Array<VmOpenApiLanguageItem>;
    /**
    * Form delivery addresses.
    */
    'deliveryAddresses'?: Array<V8VmOpenApiAddressDelivery>;
    /**
    * List of localized channel urls.
    */
    'channelUrls'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of attachments.
    */
    'attachments'?: Array<VmOpenApiAttachmentWithType>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V9VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "formIdentifier",
            "baseName": "formIdentifier",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "deliveryAddresses",
            "baseName": "deliveryAddresses",
            "type": "Array<V8VmOpenApiAddressDelivery>"
        },
        {
            "name": "channelUrls",
            "baseName": "channelUrls",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<VmOpenApiAttachmentWithType>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V9VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiPrintableFormChannel.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service
*/
export class V9VmOpenApiService {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * PTV identifier for linked general description.
    */
    'generalDescriptionId'?: string;
    /**
    * Service sub-type. It is used for SOTE and its taken from GeneralDescription's generalDescriptionType. Possible values are: PrescribedByFreedomOfChoiceAct, OtherPermissionGrantedSote.
    */
    'subType'?: string;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification. In version 7 Service, PermissionAndObligation or ProfessionalQualifications.
    */
    'type'?: string;
    /**
    * Service funding type. Possible values are: PubliclyFunded or MarketFunded.
    */
    'fundingType'?: string;
    /**
    * List of localized service names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable or FreeOfCharge.  In version 7: Charged or Free.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
    */
    'serviceChargeType'?: string;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.  In version 7: Description, ShortDescription, ServiceUserInstruction, ValidityTimeAdditionalInfo, ProcessingTimeAdditionalInfo, DeadLineAdditionalInfo, ChargeTypeAdditionalInfo, ServiceTypeAdditionalInfo.
    */
    'serviceDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service languages.
    */
    'languages'?: Array<string>;
    /**
    * List of service classes related to the service.
    */
    'serviceClasses'?: Array<V7VmOpenApiFintoItemWithDescription>;
    /**
    * List of ontology terms related to the service.
    */
    'ontologyTerms'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of target groups related to the service.
    */
    'targetGroups'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of life events  related to the service.
    */
    'lifeEvents'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of industrial classes related to the service.
    */
    'industrialClasses'?: Array<V4VmOpenApiFintoItem>;
    /**
    * List of laws related to the service.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * List of localized service keywords.
    */
    'keywords'?: Array<VmOpenApiLanguageItem>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of linked service channels including relationship data.
    */
    'serviceChannels'?: Array<V9VmOpenApiServiceServiceChannel>;
    /**
    * List of organizations, responsible and producer organizations of the service.
    */
    'organizations'?: Array<V6VmOpenApiServiceOrganization>;
    /**
    * Indicates if service vouchers are used in the service.
    */
    'serviceVouchersInUse'?: boolean;
    /**
    * List of service vouchers.
    */
    'serviceVouchers'?: Array<V9VmOpenApiServiceVoucher>;
    /**
    * List of service collections that the service has been linked to
    */
    'serviceCollections'?: Array<VmOpenApiServiceServiceCollection>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "generalDescriptionId",
            "baseName": "generalDescriptionId",
            "type": "string"
        },
        {
            "name": "subType",
            "baseName": "subType",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "fundingType",
            "baseName": "fundingType",
            "type": "string"
        },
        {
            "name": "serviceNames",
            "baseName": "serviceNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "serviceDescriptions",
            "baseName": "serviceDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<V7VmOpenApiFintoItemWithDescription>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<V4VmOpenApiFintoItem>"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "serviceChannels",
            "baseName": "serviceChannels",
            "type": "Array<V9VmOpenApiServiceServiceChannel>"
        },
        {
            "name": "organizations",
            "baseName": "organizations",
            "type": "Array<V6VmOpenApiServiceOrganization>"
        },
        {
            "name": "serviceVouchersInUse",
            "baseName": "serviceVouchersInUse",
            "type": "boolean"
        },
        {
            "name": "serviceVouchers",
            "baseName": "serviceVouchers",
            "type": "Array<V9VmOpenApiServiceVoucher>"
        },
        {
            "name": "serviceCollections",
            "baseName": "serviceCollections",
            "type": "Array<VmOpenApiServiceServiceCollection>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiService.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation
*/
export class V9VmOpenApiServiceAndChannelIn {
    /**
    * PTV service identifier.
    */
    'serviceId': string;
    /**
    * PTV service channel identifier.
    */
    'serviceChannelId': string;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related contact details.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsIn;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceId",
            "baseName": "serviceId",
            "type": "string"
        },
        {
            "name": "serviceChannelId",
            "baseName": "serviceChannelId",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsIn"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation IN (PUT).
*/
export class V9VmOpenApiServiceAndChannelRelationAstiInBase {
    /**
    * Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).
    */
    'deleteAllChannelRelations'?: boolean;
    /**
    * Gets or sets the channel relations.
    */
    'channelRelations'?: Array<V9VmOpenApiServiceServiceChannelAstiInBase>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deleteAllChannelRelations",
            "baseName": "deleteAllChannelRelations",
            "type": "boolean"
        },
        {
            "name": "channelRelations",
            "baseName": "channelRelations",
            "type": "Array<V9VmOpenApiServiceServiceChannelAstiInBase>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelRelationAstiInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service service channel - with external source
*/
export class V9VmOpenApiServiceAndChannelRelationBySource {
    /**
    * The external source id for service.
    */
    'serviceSourceId': string;
    /**
    * The external source id for service channel.
    */
    'serviceChannelSourceId': string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related contact details.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsIn;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceSourceId",
            "baseName": "serviceSourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelSourceId",
            "baseName": "serviceChannelSourceId",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsIn"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelRelationBySource.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation IN by source (PUT).
*/
export class V9VmOpenApiServiceAndChannelRelationBySourceAsti {
    /**
    * Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).
    */
    'deleteAllChannelRelations'?: boolean;
    /**
    * Gets or sets the channel relations.
    */
    'channelRelations'?: Array<V9VmOpenApiServiceServiceChannelBySourceAsti>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deleteAllChannelRelations",
            "baseName": "deleteAllChannelRelations",
            "type": "boolean"
        },
        {
            "name": "channelRelations",
            "baseName": "channelRelations",
            "type": "Array<V9VmOpenApiServiceServiceChannelBySourceAsti>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelRelationBySourceAsti.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation IN by source (PUT).
*/
export class V9VmOpenApiServiceAndChannelRelationBySourceInBase {
    /**
    * Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).
    */
    'deleteAllChannelRelations'?: boolean;
    /**
    * Gets or sets the channel relations.
    */
    'channelRelations'?: Array<V9VmOpenApiServiceServiceChannelBySource>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deleteAllChannelRelations",
            "baseName": "deleteAllChannelRelations",
            "type": "boolean"
        },
        {
            "name": "channelRelations",
            "baseName": "channelRelations",
            "type": "Array<V9VmOpenApiServiceServiceChannelBySource>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelRelationBySourceInBase.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service and channel relation IN (PUT).
*/
export class V9VmOpenApiServiceAndChannelRelationInBase {
    /**
    * Set to true to delete all existing relations between defined service and service channels (the ChannelRelations collection for this object should be empty collection when this option is used).
    */
    'deleteAllChannelRelations'?: boolean;
    /**
    * Gets or sets the channel relations.
    */
    'channelRelations'?: Array<V9VmOpenApiServiceServiceChannelInBase>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "deleteAllChannelRelations",
            "baseName": "deleteAllChannelRelations",
            "type": "boolean"
        },
        {
            "name": "channelRelations",
            "baseName": "channelRelations",
            "type": "Array<V9VmOpenApiServiceServiceChannelInBase>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceAndChannelRelationInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service channel service V9
*/
export class V9VmOpenApiServiceChannelService {
    /**
    * Service channel identifier and name.
    */
    'service'?: VmOpenApiItem;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<V9VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Contact details for connection.
    */
    'contactDetails'?: V9VmOpenApiContactDetails;
    /**
    * List of digital authorizations related to the service.
    */
    'digitalAuthorizations'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "service",
            "baseName": "service",
            "type": "VmOpenApiItem"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<V9VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetails"
        },
        {
            "name": "digitalAuthorizations",
            "baseName": "digitalAuthorizations",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceChannelService.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service channel service  IN.
*/
export class V9VmOpenApiServiceChannelServiceInBase {
    /**
    * PTV service identifier.
    */
    'serviceId': string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related service hours.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsInBase;
    /**
    * Indicates if value for property ServiceChargeType should be deleted.
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Indicates if all descriptions should be deleted.
    */
    'deleteAllDescriptions'?: boolean;
    /**
    * Indicates if all extra types should be deleted.
    */
    'deleteAllExtraTypes'?: boolean;
    /**
    * Gets or sets a value indicating whether all service hours should be delted.
    */
    'deleteAllServiceHours'?: boolean;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.
    */
    'serviceChargeType'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceId",
            "baseName": "serviceId",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsInBase"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteAllDescriptions",
            "baseName": "deleteAllDescriptions",
            "type": "boolean"
        },
        {
            "name": "deleteAllExtraTypes",
            "baseName": "deleteAllExtraTypes",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceChannelServiceInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service channels
*/
export class V9VmOpenApiServiceChannels {
    /**
    * Electronic channel.
    */
    'electronicChannel'?: V9VmOpenApiElectronicChannel;
    /**
    * Phone channel.
    */
    'phoneChannel'?: V9VmOpenApiPhoneChannel;
    /**
    * Printable form channel.
    */
    'printableFormChannel'?: V9VmOpenApiPrintableFormChannel;
    /**
    * Location channel.
    */
    'locationChannel'?: V9VmOpenApiServiceLocationChannel;
    /**
    * Web page channel.
    */
    'webPageChannel'?: V9VmOpenApiWebPageChannel;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "electronicChannel",
            "baseName": "electronicChannel",
            "type": "V9VmOpenApiElectronicChannel"
        },
        {
            "name": "phoneChannel",
            "baseName": "phoneChannel",
            "type": "V9VmOpenApiPhoneChannel"
        },
        {
            "name": "printableFormChannel",
            "baseName": "printableFormChannel",
            "type": "V9VmOpenApiPrintableFormChannel"
        },
        {
            "name": "locationChannel",
            "baseName": "locationChannel",
            "type": "V9VmOpenApiServiceLocationChannel"
        },
        {
            "name": "webPageChannel",
            "baseName": "webPageChannel",
            "type": "V9VmOpenApiWebPageChannel"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceChannels.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service for IN api
*/
export class V9VmOpenApiServiceIn {
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription
    */
    'generalDescriptionId'?: string;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.
    */
    'type'?: string;
    /**
    * Service funding type. Possible values are: PubliclyFunded or MarketFunded.
    */
    'fundingType': string;
    /**
    * List of service names. Possible type values are: Name, AlternativeName.
    */
    'serviceNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
    */
    'serviceChargeType'?: string;
    /**
    * Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
    */
    'areaType': string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.
    */
    'serviceDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service language codes.
    */
    'languages': Array<string>;
    /**
    * List of service class urls (see http://finto.fi/ptvl/fi/).  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.
    */
    'serviceClasses'?: Array<string>;
    /**
    * List of ontology term urls (see http://finto.fi/koko/fi/).  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.
    */
    'ontologyTerms'?: Array<string>;
    /**
    * List of target group urls (see http://finto.fi/ptvl/fi/page/?uri=http://urn.fi/URN:NBN:fi:au:ptvl:KR).  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.
    */
    'targetGroups'?: Array<string>;
    /**
    * List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.
    */
    'lifeEvents'?: Array<string>;
    /**
    * List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.
    */
    'industrialClasses'?: Array<string>;
    /**
    * List of laws related to the service.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * List of localized service keywords.
    */
    'keywords'?: Array<VmOpenApiLanguageItem>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of other responsible organizations for the service.
    */
    'otherResponsibleOrganizations'?: Array<string>;
    /**
    * List of service producers
    */
    'serviceProducers': Array<V9VmOpenApiServiceProducerIn>;
    /**
    * Indicates if service vouchers are used in the service.
    */
    'serviceVouchersInUse'?: boolean;
    /**
    * List of service vouchers.
    */
    'serviceVouchers'?: Array<V9VmOpenApiServiceVoucher>;
    /**
    * Publishing status. Possible values are: Draft or Published.
    */
    'publishingStatus': string;
    /**
    * List of related service channels (GUID).
    */
    'serviceChannels'?: Array<string>;
    /**
    * Main organization id.
    */
    'mainResponsibleOrganization': string;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "generalDescriptionId",
            "baseName": "generalDescriptionId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "fundingType",
            "baseName": "fundingType",
            "type": "string"
        },
        {
            "name": "serviceNames",
            "baseName": "serviceNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "serviceDescriptions",
            "baseName": "serviceDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<string>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<string>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<string>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<string>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<string>"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "otherResponsibleOrganizations",
            "baseName": "otherResponsibleOrganizations",
            "type": "Array<string>"
        },
        {
            "name": "serviceProducers",
            "baseName": "serviceProducers",
            "type": "Array<V9VmOpenApiServiceProducerIn>"
        },
        {
            "name": "serviceVouchersInUse",
            "baseName": "serviceVouchersInUse",
            "type": "boolean"
        },
        {
            "name": "serviceVouchers",
            "baseName": "serviceVouchers",
            "type": "Array<V9VmOpenApiServiceVoucher>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "serviceChannels",
            "baseName": "serviceChannels",
            "type": "Array<string>"
        },
        {
            "name": "mainResponsibleOrganization",
            "baseName": "mainResponsibleOrganization",
            "type": "string"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service for IN api - base
*/
export class V9VmOpenApiServiceInBase {
    /**
    * External system identifier for the entity. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Valid PTV statutory service general description identifier that this service will be linked to. List of valid identifiers can be retrieved from the endpoint /api/GeneralDescription
    */
    'generalDescriptionId'?: string;
    /**
    * Service type. Possible values are: Service, PermitOrObligation or ProfessionalQualification.  NOTE! If service type has been defined within attached statutory service general description, the type for service is ignored.
    */
    'type'?: string;
    /**
    * Service funding type. Possible values are: PubliclyFunded or MarketFunded.
    */
    'fundingType'?: string;
    /**
    * List of localized service names. Possible type values are: Name, AlternativeName.
    */
    'serviceNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable or FreeOfCharge.  NOTE! If service charge type has been defined within attached statutory service general description, the charge type for service is ignored.
    */
    'serviceChargeType'?: string;
    /**
    * Area type (Nationwide, NationwideExceptAlandIslands, LimitedType).
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List of localized service descriptions. Possible type values are: Description, Summary, UserInstruction, ValidityTime, ProcessingTime, DeadLine, ChargeTypeAdditionalInfo, ServiceType.
    */
    'serviceDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of service languages.
    */
    'languages'?: Array<string>;
    /**
    * List of service class urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v1065.  NOTE! If service class has been defined within attached statutory service general description, the service class is not added for service.
    */
    'serviceClasses'?: Array<string>;
    /**
    * List of ontology term urls. Sample url: http://www.yso.fi/onto/koko/p2435.  NOTE! If ontology term has been defined within attached statutory service general description, the ontology term is not added for service.
    */
    'ontologyTerms'?: Array<string>;
    /**
    * List of target group urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v2004.  NOTE! If target group has been defined within attached statutory service general description, the target group is not added for service.
    */
    'targetGroups'?: Array<string>;
    /**
    * List of life event urls. Sample url: http://urn.fi/URN:NBN:fi:au:ptvl:v3017  NOTE! If life event has been defined within attached statutory service general description, the life event is not added for service.
    */
    'lifeEvents'?: Array<string>;
    /**
    * List of industrial class codes (see http://tilastokeskus.fi/meta/luokitukset/toimiala/001-2008/tekstitiedosto_en.txt).  NOTE! If industrial class has been defined within attached statutory service general description, the industrial class is not added for service.
    */
    'industrialClasses'?: Array<string>;
    /**
    * List of laws related to the service.
    */
    'legislation'?: Array<V4VmOpenApiLaw>;
    /**
    * List of localized service keywords.
    */
    'keywords'?: Array<VmOpenApiLanguageItem>;
    /**
    * Localized service usage requirements (description of requirement).
    */
    'requirements'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of other responsible organizations for the service.
    */
    'otherResponsibleOrganizations'?: Array<string>;
    /**
    * List of service producers
    */
    'serviceProducers'?: Array<V9VmOpenApiServiceProducerIn>;
    /**
    * Indicates if service vouchers are used in the service.
    */
    'serviceVouchersInUse'?: boolean;
    /**
    * List of service vouchers.
    */
    'serviceVouchers'?: Array<V9VmOpenApiServiceVoucher>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Set to true to delete all existing life events (the LifeEvents collection for this object should be empty collection when this option is used).
    */
    'deleteAllLifeEvents'?: boolean;
    /**
    * Set to true to delete all existing industrial classes (the IndustrialClasses collection for this object should be empty collection when this option is used).
    */
    'deleteAllIndustrialClasses'?: boolean;
    /**
    * Set to true to delete all existing laws within legislation (the legislation collection for this object should be empty collection when this option is used).
    */
    'deleteAllLaws'?: boolean;
    /**
    * Set to true to delete all existing keywords (the Keywords collection for this object should be empty collection when this option is used).
    */
    'deleteAllKeywords'?: boolean;
    /**
    * Set to true to delete service charge type (ServiceChargeType property for this object should be empty when this option is used).
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Set to true to delete statutory service general description (GeneralDescriptionId property for this object should be empty when this option is used).
    */
    'deleteGeneralDescriptionId'?: boolean;
    /**
    * Main responsible organization Id
    */
    'mainResponsibleOrganization'?: string;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "generalDescriptionId",
            "baseName": "generalDescriptionId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "fundingType",
            "baseName": "fundingType",
            "type": "string"
        },
        {
            "name": "serviceNames",
            "baseName": "serviceNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "serviceDescriptions",
            "baseName": "serviceDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "serviceClasses",
            "baseName": "serviceClasses",
            "type": "Array<string>"
        },
        {
            "name": "ontologyTerms",
            "baseName": "ontologyTerms",
            "type": "Array<string>"
        },
        {
            "name": "targetGroups",
            "baseName": "targetGroups",
            "type": "Array<string>"
        },
        {
            "name": "lifeEvents",
            "baseName": "lifeEvents",
            "type": "Array<string>"
        },
        {
            "name": "industrialClasses",
            "baseName": "industrialClasses",
            "type": "Array<string>"
        },
        {
            "name": "legislation",
            "baseName": "legislation",
            "type": "Array<V4VmOpenApiLaw>"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "requirements",
            "baseName": "requirements",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "otherResponsibleOrganizations",
            "baseName": "otherResponsibleOrganizations",
            "type": "Array<string>"
        },
        {
            "name": "serviceProducers",
            "baseName": "serviceProducers",
            "type": "Array<V9VmOpenApiServiceProducerIn>"
        },
        {
            "name": "serviceVouchersInUse",
            "baseName": "serviceVouchersInUse",
            "type": "boolean"
        },
        {
            "name": "serviceVouchers",
            "baseName": "serviceVouchers",
            "type": "Array<V9VmOpenApiServiceVoucher>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "deleteAllLifeEvents",
            "baseName": "deleteAllLifeEvents",
            "type": "boolean"
        },
        {
            "name": "deleteAllIndustrialClasses",
            "baseName": "deleteAllIndustrialClasses",
            "type": "boolean"
        },
        {
            "name": "deleteAllLaws",
            "baseName": "deleteAllLaws",
            "type": "boolean"
        },
        {
            "name": "deleteAllKeywords",
            "baseName": "deleteAllKeywords",
            "type": "boolean"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteGeneralDescriptionId",
            "baseName": "deleteGeneralDescriptionId",
            "type": "boolean"
        },
        {
            "name": "mainResponsibleOrganization",
            "baseName": "mainResponsibleOrganization",
            "type": "string"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceInBase.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service location channel
*/
export class V9VmOpenApiServiceLocationChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Service channel OID. Must match the regex @\"^[A-Za-z0-9.-]*$\".
    */
    'oid'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of ServiceChannelNames.
    */
    'displayNameType'?: Array<VmOpenApiNameTypeByLanguage>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.  In version 7 and older: WholeCountry, WholeCountryExceptAlandIslands, AreaType.
    */
    'areaType'?: string;
    /**
    * List of service channel areas.
    */
    'areas'?: Array<VmOpenApiArea>;
    /**
    * List of phone numbers for the service channel. Includes also fax numbers.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhoneWithType>;
    /**
    * List email addresses for the service channel.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddressLocation>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V9VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiArea>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhoneWithType>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressLocation>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V9VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceLocationChannel.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service location channel for IN api
*/
export class V9VmOpenApiServiceLocationChannelIn {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Service channel OID. Must match the regex @\"^[A-Za-z0-9.-]*$\".
    */
    'oid'?: string;
    /**
    * PTV organization identifier of organization responsible for this channel.
    */
    'organizationId': string;
    /**
    * List of localized service channel names. Possible type values are: Name, AlternativeName.
    */
    'serviceChannelNames': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions': Array<VmOpenApiLocalizedListItem>;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of ServiceChannelNames.  Is only available for PUT operations, since user cannot add alternative anmes through in api (PTV-4340).
    */
    'displayNameType': Array<VmOpenApiNameTypeByLanguage>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List email addresses for the service channel.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * Service location contact fax numbers.
    */
    'faxNumbers'?: Array<V4VmOpenApiPhoneSimple>;
    /**
    * List of support phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages': Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of visiting addresses.
    */
    'addresses': Array<V9VmOpenApiAddressLocationIn>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Service channel publishing status. Values: Draft or Published.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * List of related services (GUID).
    */
    'services'?: Array<string>;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "faxNumbers",
            "baseName": "faxNumbers",
            "type": "Array<V4VmOpenApiPhoneSimple>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressLocationIn>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<string>"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceLocationChannelIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service location channel for IN api - base
*/
export class V9VmOpenApiServiceLocationChannelInBase {
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Service channel OID. Must match the regex @\"^[A-Za-z0-9.-]*$\".
    */
    'oid'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary.
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * PTV organization identifier for organization responsible for this service channel.
    */
    'organizationId'?: string;
    /**
    * List of Display name types (Name or AlternativeName) for each language version of ServiceChannelNames.
    */
    'displayNameType'?: Array<VmOpenApiNameTypeByLanguage>;
    /**
    * Area type. Possible values are: Nationwide, NationwideExceptAlandIslands or LimitedType.
    */
    'areaType'?: string;
    /**
    * List of areas. List can contain different types of areas.
    */
    'areas'?: Array<VmOpenApiAreaIn>;
    /**
    * List email addresses for the service channel.
    */
    'emails'?: Array<VmOpenApiLanguageItem>;
    /**
    * Service location contact fax numbers.
    */
    'faxNumbers'?: Array<V4VmOpenApiPhoneSimple>;
    /**
    * List of support phone numbers for the service channel.
    */
    'phoneNumbers'?: Array<V4VmOpenApiPhone>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service location addresses.
    */
    'addresses'?: Array<V9VmOpenApiAddressLocationIn>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Set to true to delete emails. The email property should be empty when this property is set to true.
    */
    'deleteAllEmails'?: boolean;
    /**
    * Set to true to delete phone number. The prohone property should be empty when this property is set to true.
    */
    'deleteAllPhoneNumbers'?: boolean;
    /**
    * Set to true to delete fax number. The fax property should be empty when this property is set to true.
    */
    'deleteAllFaxNumbers'?: boolean;
    /**
    * Set to true to delete OID. The Oid property should be empty when this property is set to true.
    */
    'deleteOid'?: boolean;
    /**
    * Service channel publishing status. Values: Draft, Published, Deleted or Modified.
    */
    'publishingStatus': string;
    /**
    * Indicates if channel can be used (referenced within services) by other users from other organizations.
    */
    'isVisibleForAll'?: boolean;
    /**
    * Date when item should be published.
    */
    'validFrom'?: Date;
    /**
    * Date when item should be archived.
    */
    'validTo'?: Date;
    /**
    * Set to true to delete all existing web pages for the service channel. The WebPages collection should be empty when this property is set to true.
    */
    'deleteAllWebPages'?: boolean;
    /**
    * Set to true to delete all existing service hours for the service channel. The ServiceHours collection should be empty when this property is set to true.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "displayNameType",
            "baseName": "displayNameType",
            "type": "Array<VmOpenApiNameTypeByLanguage>"
        },
        {
            "name": "areaType",
            "baseName": "areaType",
            "type": "string"
        },
        {
            "name": "areas",
            "baseName": "areas",
            "type": "Array<VmOpenApiAreaIn>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "faxNumbers",
            "baseName": "faxNumbers",
            "type": "Array<V4VmOpenApiPhoneSimple>"
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<V9VmOpenApiAddressLocationIn>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "deleteAllEmails",
            "baseName": "deleteAllEmails",
            "type": "boolean"
        },
        {
            "name": "deleteAllPhoneNumbers",
            "baseName": "deleteAllPhoneNumbers",
            "type": "boolean"
        },
        {
            "name": "deleteAllFaxNumbers",
            "baseName": "deleteAllFaxNumbers",
            "type": "boolean"
        },
        {
            "name": "deleteOid",
            "baseName": "deleteOid",
            "type": "boolean"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "isVisibleForAll",
            "baseName": "isVisibleForAll",
            "type": "boolean"
        },
        {
            "name": "validFrom",
            "baseName": "validFrom",
            "type": "Date"
        },
        {
            "name": "validTo",
            "baseName": "validTo",
            "type": "Date"
        },
        {
            "name": "deleteAllWebPages",
            "baseName": "deleteAllWebPages",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceLocationChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service producer
*/
export class V9VmOpenApiServiceProducerIn {
    /**
    * Provision type, valid values for version 8 are SelfProducedServices, ProcuredServices or Other.  For older versions valid values are SelfProduced, PurchaseServices or Other.
    */
    'provisionType': string;
    /**
    * Gets or sets the organization id information.
    */
    'organizations'?: Array<string>;
    /**
    * Localized list of additional information.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "provisionType",
            "baseName": "provisionType",
            "type": "string"
        },
        {
            "name": "organizations",
            "baseName": "organizations",
            "type": "Array<string>"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceProducerIn.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service channel
*/
export class V9VmOpenApiServiceServiceChannel {
    /**
    * Service channel identifier and name.
    */
    'serviceChannel'?: VmOpenApiItem;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<V9VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * Contact details for connection.
    */
    'contactDetails'?: V9VmOpenApiContactDetails;
    /**
    * List of digital authorizations related to the service.
    */
    'digitalAuthorizations'?: Array<V4VmOpenApiFintoItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannel",
            "baseName": "serviceChannel",
            "type": "VmOpenApiItem"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<V9VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetails"
        },
        {
            "name": "digitalAuthorizations",
            "baseName": "digitalAuthorizations",
            "type": "Array<V4VmOpenApiFintoItem>"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceServiceChannel.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service service channel IN.
*/
export class V9VmOpenApiServiceServiceChannelAstiInBase {
    /**
    * PTV service channel identifier.
    */
    'serviceChannelId': string;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related service hours.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsInBase;
    /**
    * Indicates if value for property ServiceChargeType should be deleted.
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Indicates if all descriptions should be deleted.
    */
    'deleteAllDescriptions'?: boolean;
    /**
    * Indicates if all extra types should be deleted.
    */
    'deleteAllExtraTypes'?: boolean;
    /**
    * Gets or sets a value indicating whether all service hours should be delted.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannelId",
            "baseName": "serviceChannelId",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsInBase"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteAllDescriptions",
            "baseName": "deleteAllDescriptions",
            "type": "boolean"
        },
        {
            "name": "deleteAllExtraTypes",
            "baseName": "deleteAllExtraTypes",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceServiceChannelAstiInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service service channel - with external source and external types
*/
export class V9VmOpenApiServiceServiceChannelBySource {
    /**
    * The external source id for service channel.
    */
    'serviceChannelSourceId': string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related contact details.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsInBase;
    /**
    * Indicates if value for property ServiceChargeType should be deleted.
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Indicates if all descriptions should be deleted.
    */
    'deleteAllDescriptions'?: boolean;
    /**
    * Gets or sets a value indicating whether all service hours should be deleted.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannelSourceId",
            "baseName": "serviceChannelSourceId",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsInBase"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteAllDescriptions",
            "baseName": "deleteAllDescriptions",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceServiceChannelBySource.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service service channel - with external source and external types
*/
export class V9VmOpenApiServiceServiceChannelBySourceAsti {
    /**
    * The external source id for service channel.
    */
    'serviceChannelSourceId': string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other
    */
    'serviceChargeType'?: string;
    /**
    * The extra types related to service and service channel connection.
    */
    'extraTypes'?: Array<VmOpenApiExtraType>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related contact details.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsInBase;
    /**
    * Indicates if value for property ServiceChargeType should be deleted.
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Indicates if all descriptions should be deleted.
    */
    'deleteAllDescriptions'?: boolean;
    /**
    * Indicates if all extra types should be deleted.
    */
    'deleteAllExtraTypes'?: boolean;
    /**
    * Gets or sets a value indicating whether all service hours should be deleted.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannelSourceId",
            "baseName": "serviceChannelSourceId",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "extraTypes",
            "baseName": "extraTypes",
            "type": "Array<VmOpenApiExtraType>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsInBase"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteAllDescriptions",
            "baseName": "deleteAllDescriptions",
            "type": "boolean"
        },
        {
            "name": "deleteAllExtraTypes",
            "baseName": "deleteAllExtraTypes",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceServiceChannelBySourceAsti.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of service service channel (PUT).
*/
export class V9VmOpenApiServiceServiceChannelInBase {
    /**
    * PTV service channel identifier.
    */
    'serviceChannelId': string;
    /**
    * Service charge type. Possible values are: Chargeable, FreeOfCharge or Other.  In version 7 and older: Charged, Free or Other
    */
    'serviceChargeType'?: string;
    /**
    * List of localized service channel relationship descriptions. Possible type values are: Description, ChargeTypeAdditionalInfo.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of connection related service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * List of connection related service hours.
    */
    'contactDetails'?: V9VmOpenApiContactDetailsInBase;
    /**
    * Indicates if value for property ServiceChargeType should be deleted.
    */
    'deleteServiceChargeType'?: boolean;
    /**
    * Indicates if all descriptions should be deleted.
    */
    'deleteAllDescriptions'?: boolean;
    /**
    * Gets or sets a value indicating whether all service hours should be delted.
    */
    'deleteAllServiceHours'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "serviceChannelId",
            "baseName": "serviceChannelId",
            "type": "string"
        },
        {
            "name": "serviceChargeType",
            "baseName": "serviceChargeType",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "contactDetails",
            "baseName": "contactDetails",
            "type": "V9VmOpenApiContactDetailsInBase"
        },
        {
            "name": "deleteServiceChargeType",
            "baseName": "deleteServiceChargeType",
            "type": "boolean"
        },
        {
            "name": "deleteAllDescriptions",
            "baseName": "deleteAllDescriptions",
            "type": "boolean"
        },
        {
            "name": "deleteAllServiceHours",
            "baseName": "deleteAllServiceHours",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceServiceChannelInBase.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of service voucher
*/
export class V9VmOpenApiServiceVoucher {
    /**
    * Name of the service voucher.
    */
    'value'?: string;
    /**
    * Language code.
    */
    'language': string;
    /**
    * Web page url.
    */
    'url'?: string;
    /**
    * Service voucher additional information
    */
    'additionalInformation'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiServiceVoucher.attributeTypeMap;
    }
}

/**
* Open API web page model.
*/
export class V9VmOpenApiWebPage {
    /**
    * Web page url.
    */
    'url': string;
    /**
    * Name of the web page.
    */
    'value'?: string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiWebPage.attributeTypeMap;
    }
}

/**
* OPEN API V9 - View Model of web page channel
*/
export class V9VmOpenApiWebPageChannel {
    /**
    * PTV identifier for the service channel.
    */
    'id'?: string;
    /**
    * External system identifier for this service channel. User needs to be logged in to be able to get/set value.
    */
    'sourceId'?: string;
    /**
    * Type of the service channel. Channel types: EChannel, WebPage, PrintableForm, Phone or ServiceLocation.
    */
    'serviceChannelType'?: string;
    /**
    * PTV organization identifier responsible for the channel.
    */
    'organizationId'?: string;
    /**
    * Localized list of service channel names. Possible type values are: Name, AlternativeName (in version 7 AlternateName).
    */
    'serviceChannelNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of localized service channel descriptions. Possible type values are: Description, Summary (in version 7 ShortDescription).
    */
    'serviceChannelDescriptions'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of support phone numbers for the service channel.
    */
    'supportPhones'?: Array<V4VmOpenApiPhone>;
    /**
    * List of support email addresses for the service channel.
    */
    'supportEmails'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of languages the service channel is available in (two letter language code).
    */
    'languages'?: Array<string>;
    /**
    * List of service channel web pages.
    */
    'webPages'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of service channel service hours.
    */
    'serviceHours'?: Array<V8VmOpenApiServiceHour>;
    /**
    * The accessibility classification level.
    */
    'accessibilityClassificationLevel'?: string;
    /**
    * The web content accessibility level.
    */
    'wcagLevel'?: string;
    /**
    * List of accessibility web pages. One per language.
    */
    'accessibilityStatementWebPage'?: Array<V9VmOpenApiWebPage>;
    /**
    * List of linked services including relationship data.
    */
    'services'?: Array<V9VmOpenApiServiceChannelService>;
    /**
    * Publishing status. Possible values are: Draft, Published, Deleted or Modified.
    */
    'publishingStatus'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "sourceId",
            "baseName": "sourceId",
            "type": "string"
        },
        {
            "name": "serviceChannelType",
            "baseName": "serviceChannelType",
            "type": "string"
        },
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "serviceChannelNames",
            "baseName": "serviceChannelNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "serviceChannelDescriptions",
            "baseName": "serviceChannelDescriptions",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "supportPhones",
            "baseName": "supportPhones",
            "type": "Array<V4VmOpenApiPhone>"
        },
        {
            "name": "supportEmails",
            "baseName": "supportEmails",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "languages",
            "baseName": "languages",
            "type": "Array<string>"
        },
        {
            "name": "webPages",
            "baseName": "webPages",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "serviceHours",
            "baseName": "serviceHours",
            "type": "Array<V8VmOpenApiServiceHour>"
        },
        {
            "name": "accessibilityClassificationLevel",
            "baseName": "accessibilityClassificationLevel",
            "type": "string"
        },
        {
            "name": "wcagLevel",
            "baseName": "wcagLevel",
            "type": "string"
        },
        {
            "name": "accessibilityStatementWebPage",
            "baseName": "accessibilityStatementWebPage",
            "type": "Array<V9VmOpenApiWebPage>"
        },
        {
            "name": "services",
            "baseName": "services",
            "type": "Array<V9VmOpenApiServiceChannelService>"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return V9VmOpenApiWebPageChannel.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of type by language
*/
export class VmOpenApiAccessibilityClassification {
    /**
    * Gets or sets the accessibility classification level.
    */
    'accessibilityClassificationLevel': string;
    /**
    * Gets or sets the wcag level.
    */
    'wcagLevel'?: string;
    /**
    * Gets or sets the accessibility classification web page name.
    */
    'accessibilityStatementWebPageName'?: string;
    /**
    * Gets or sets the accessibility classification web page url.
    */
    'accessibilityStatementWebPage'?: string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessibilityClassificationLevel",
            "baseName": "accessibilityClassificationLevel",
            "type": "string"
        },
        {
            "name": "wcagLevel",
            "baseName": "wcagLevel",
            "type": "string"
        },
        {
            "name": "accessibilityStatementWebPageName",
            "baseName": "accessibilityStatementWebPageName",
            "type": "string"
        },
        {
            "name": "accessibilityStatementWebPage",
            "baseName": "accessibilityStatementWebPage",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAccessibilityClassification.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of contacts for accessibility register
*/
export class VmOpenApiAccessibilityContactInfo {
    /**
    * Phone
    */
    'phone'?: string;
    /**
    * Email
    */
    'email'?: string;
    /**
    * Url
    */
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAccessibilityContactInfo.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of accessibility sentences.
*/
export class VmOpenApiAccessibilitySentence {
    /**
    * List of localized sentence group names.
    */
    'sentenceGroup'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of localized sentences.
    */
    'sentences'?: Array<VmOpenApiSentenceValue>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sentenceGroup",
            "baseName": "sentenceGroup",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "sentences",
            "baseName": "sentences",
            "type": "Array<VmOpenApiSentenceValue>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAccessibilitySentence.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of other address.
*/
export class VmOpenApiAddressOther {
    /**
    * Location latitude coordinate.
    */
    'latitude'?: string;
    /**
    * Location longitude coordinate.
    */
    'longitude'?: string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * List of localized Post offices, for example Helsinki, Helsingfors.
    */
    'postOffice'?: Array<VmOpenApiLanguageItem>;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "string"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "postOffice",
            "baseName": "postOffice",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressOther.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of other address.
*/
export class VmOpenApiAddressOtherIn {
    /**
    * Location latitude coordinate.
    */
    'latitude': string;
    /**
    * Location longitude coordinate.
    */
    'longitude': string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode'?: string;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation': Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "string"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressOtherIn.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of post office box address.
*/
export class VmOpenApiAddressPostOfficeBox {
    /**
    * Post office box like PL 310
    */
    'postOfficeBox': Array<VmOpenApiLanguageItem>;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * List of localized Post offices, for example Helsinki, Helsingfors.
    */
    'postOffice'?: Array<VmOpenApiLanguageItem>;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: VmOpenApiMunicipality;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "postOfficeBox",
            "baseName": "postOfficeBox",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "postOffice",
            "baseName": "postOffice",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "VmOpenApiMunicipality"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressPostOfficeBox.attributeTypeMap;
    }
}

/**
* OPEN API V7 - In view Model of post office box address.
*/
export class VmOpenApiAddressPostOfficeBoxIn {
    /**
    * Post office box like PL 310
    */
    'postOfficeBox': Array<VmOpenApiLanguageItem>;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: string;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "postOfficeBox",
            "baseName": "postOfficeBox",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressPostOfficeBoxIn.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of street address
*/
export class VmOpenApiAddressStreet {
    /**
    * List of localized street addresses.
    */
    'street'?: Array<VmOpenApiLanguageItem>;
    /**
    * Street number for street address.
    */
    'streetNumber'?: string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * List of localized Post offices, for example Helsinki, Helsingfors.
    */
    'postOffice'?: Array<VmOpenApiLanguageItem>;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: VmOpenApiMunicipality;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "street",
            "baseName": "street",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "streetNumber",
            "baseName": "streetNumber",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "postOffice",
            "baseName": "postOffice",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "VmOpenApiMunicipality"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressStreet.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of address with type
*/
export class VmOpenApiAddressStreetIn {
    /**
    * List of localized street addresses.
    */
    'street': Array<VmOpenApiLanguageItem>;
    /**
    * Street number for street address.
    */
    'streetNumber'?: string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: string;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "street",
            "baseName": "street",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "streetNumber",
            "baseName": "streetNumber",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressStreetIn.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of address with type
*/
export class VmOpenApiAddressStreetWithCoordinates {
    /**
    * List of localized street addresses.
    */
    'street'?: Array<VmOpenApiLanguageItem>;
    /**
    * Street number for street address.
    */
    'streetNumber'?: string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * List of localized Post offices, for example Helsinki, Helsingfors.
    */
    'postOffice'?: Array<VmOpenApiLanguageItem>;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: VmOpenApiMunicipality;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;
    /**
    * Location latitude coordinate.
    */
    'latitude'?: string;
    /**
    * Location longitude coordinate.
    */
    'longitude'?: string;
    /**
    * State of coordinates. Coordinates are fetched from a service provided by Maanmittauslaitos (WFS).  Possible values are: Loading, Ok, Failed, NotReceived, EmptyInputReceived, MultipleResultsReceived, WrongFormatReceived or EnteredByUser.
    */
    'coordinateState'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "street",
            "baseName": "street",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "streetNumber",
            "baseName": "streetNumber",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "postOffice",
            "baseName": "postOffice",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "VmOpenApiMunicipality"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "string"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "string"
        },
        {
            "name": "coordinateState",
            "baseName": "coordinateState",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressStreetWithCoordinates.attributeTypeMap;
    }
}

/**
* OPEN API V7 - View Model of address with type
*/
export class VmOpenApiAddressStreetWithCoordinatesIn {
    /**
    * List of localized street addresses.
    */
    'street'?: Array<VmOpenApiLanguageItem>;
    /**
    * Street number for street address.
    */
    'streetNumber'?: string;
    /**
    * Postal code, for example 00100.
    */
    'postalCode': string;
    /**
    * Municipality code (e.g. 091).
    */
    'municipality'?: string;
    /**
    * Localized list of additional information about the address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;
    /**
    * Location latitude coordinate.
    */
    'latitude'?: string;
    /**
    * Location longitude coordinate.
    */
    'longitude'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "street",
            "baseName": "street",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "streetNumber",
            "baseName": "streetNumber",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postalCode",
            "type": "string"
        },
        {
            "name": "municipality",
            "baseName": "municipality",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "string"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAddressStreetWithCoordinatesIn.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Area
*/
export class VmOpenApiArea {
    /**
    * Type of the area. Possible values are: Municipality, Region, BusinessSubRegion, HospitalDistrict.  In version 7 and older: Municipality, Province, BusinessRegions, HospitalRegions.
    */
    'type'?: string;
    /**
    * Code of the area.
    */
    'code'?: string;
    /**
    * Localized list of names for the area
    */
    'name'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of municipalities including municipality code and a localized list of municipality names.
    */
    'municipalities'?: Array<VmOpenApiMunicipality>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "municipalities",
            "baseName": "municipalities",
            "type": "Array<VmOpenApiMunicipality>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiArea.attributeTypeMap;
    }
}

/**
* OPEN API - View Model interface of area IN (POST and PUT).
*/
export class VmOpenApiAreaIn {
    /**
    * Type of the area. Possible values are: Municipality, Region, BusinessSubRegion or HospitalDistrict.  In version 7 and older: Municipality, Province, BusinessRegions, HospitalRegions.
    */
    'type': string;
    /**
    * List of area codes related to type. For example if type = Municipality, areaCodes-list need to include municipality codes like 491 or 091.
    */
    'areaCodes': Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "areaCodes",
            "baseName": "areaCodes",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAreaIn.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Attachment
*/
export class VmOpenApiAttachment {
    /**
    * Name of the attachment.
    */
    'name'?: string;
    /**
    * Description of the attachment.
    */
    'description'?: string;
    /**
    * Url to the attachment.
    */
    'url': string;
    /**
    * Language of this object. Valid values are: fi, sv or en.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAttachment.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Attachment with type
*/
export class VmOpenApiAttachmentWithType {
    /**
    * Type of the attachment. Valid values are: Form or Attachment.
    */
    'type'?: string;
    /**
    * Name of the attachment.
    */
    'name'?: string;
    /**
    * Description of the attachment.
    */
    'description'?: string;
    /**
    * Url to the attachment.
    */
    'url': string;
    /**
    * Language of this object. Valid values are: fi, sv or en.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiAttachmentWithType.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of codelist item
*/
export class VmOpenApiCodeListItem {
    /**
    * Localized value corresponding to the Language property value.
    */
    'code'?: string;
    /**
    * Localized list of names.
    */
    'names'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiCodeListItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of code list page
*/
export class VmOpenApiCodeListPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiCodeListItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiCodeListItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiCodeListPage.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of coordinates for address
*/
export class VmOpenApiCoordinates {
    /**
    * Location latitude coordinate.
    */
    'latitude'?: string;
    /**
    * Location longitude coordinate.
    */
    'longitude'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "string"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiCoordinates.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of codelist item
*/
export class VmOpenApiDialCodeListItem {
    /**
    * Localized value corresponding to the Language property value.
    */
    'code'?: string;
    /**
    * Localized list of names.
    */
    'names'?: Array<VmOpenApiLanguageItem>;
    /**
    * List of prefix numbers
    */
    'prefixNumbers'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "names",
            "baseName": "names",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "prefixNumbers",
            "baseName": "prefixNumbers",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiDialCodeListItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of entity guid page
*/
export class VmOpenApiEntityGuidPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiEntityItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiEntityItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiEntityGuidPage.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of entity item
*/
export class VmOpenApiEntityItem {
    /**
    * Id of the item.
    */
    'id'?: string;
    /**
    * Type of the item. For version 10 (and up) the type for service can be Service, PermitOrObligation or ProfessionalQualification   and for service channel EChannel, WebPage, PrintableForm, Phone or ServiceLocation.   In older versions type can only be either Service or ServiceChannel.
    */
    'type'?: string;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiEntityItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of extra types
*/
export class VmOpenApiExtraType {
    /**
    * Type of the area (Asti).
    */
    'type'?: string;
    /**
    * Code of the extra type.   In Asti case the code can be DocumentReceived, GuidanceToOnlineSelfService, LostAndFound, OnlineSelfServicePoint,   OnsiteGuidance, OnsiteGuidanceByServiceAuthor or RemoteGuidance
    */
    'code'?: string;
    /**
    * List of localized extra type descriptions.
    */
    'description'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiExtraType.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of item
*/
export class VmOpenApiItem {
    /**
    * Id of the item.
    */
    'id'?: string;
    /**
    * Name of the item.
    */
    'name'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of language item
*/
export class VmOpenApiLanguageItem {
    /**
    * Localized value corresponding to the Language property value.
    */
    'value': string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiLanguageItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of localized list item
*/
export class VmOpenApiLocalizedListItem {
    /**
    * Language code.
    */
    'language': string;
    /**
    * Value of the item.
    */
    'value': string;
    /**
    * Type of the item.
    */
    'type': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiLocalizedListItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of municipality
*/
export class VmOpenApiMunicipality {
    /**
    * Municipality code (like 491 or 091).
    */
    'code'?: string;
    /**
    * List of localized municipality names.
    */
    'name'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiMunicipality.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of type by language
*/
export class VmOpenApiNameTypeByLanguage {
    /**
    * DisplayNameType preferred by language code (Name or Alternative/AlternateName).
    */
    'type': string;
    /**
    * Language code.
    */
    'language': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiNameTypeByLanguage.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization email
*/
export class VmOpenApiOrganizationEInvoicing {
    /**
    * Operator code.
    */
    'operatorCode'?: string;
    /**
    * Electronic invoicing address
    */
    'electronicInvoicingAddress'?: string;
    /**
    * Localized list of additional information for electronic invoicing address.
    */
    'additionalInformation'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "operatorCode",
            "baseName": "operatorCode",
            "type": "string"
        },
        {
            "name": "electronicInvoicingAddress",
            "baseName": "electronicInvoicingAddress",
            "type": "string"
        },
        {
            "name": "additionalInformation",
            "baseName": "additionalInformation",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationEInvoicing.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization hierarchy
*/
export class VmOpenApiOrganizationHierarchy {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The parent for organization.
    */
    'parent'?: VmOpenApiOrganizationParent;
    /**
    * List of sub organizations
    */
    'subOrganizations'?: Array<VmOpenApiOrganizationSub>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "parent",
            "baseName": "parent",
            "type": "VmOpenApiOrganizationParent"
        },
        {
            "name": "subOrganizations",
            "baseName": "subOrganizations",
            "type": "Array<VmOpenApiOrganizationSub>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationHierarchy.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization parent.
*/
export class VmOpenApiOrganizationParent {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * The parent for organization.
    */
    'parent'?: VmOpenApiOrganizationParent;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "parent",
            "baseName": "parent",
            "type": "VmOpenApiOrganizationParent"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationParent.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Saha organization
*/
export class VmOpenApiOrganizationSaha {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * Organizations parent organization identifier if exists.
    */
    'parentOrganizationId'?: string;
    /**
    * Organizations Saha identifier if exists.
    */
    'sahaId'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Date when item was modified/created (UTC).
    */
    'modified'?: Date;
    /**
    * Publishing status (Published or Deleted).
    */
    'publishingStatus'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "parentOrganizationId",
            "baseName": "parentOrganizationId",
            "type": "string"
        },
        {
            "name": "sahaId",
            "baseName": "sahaId",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "modified",
            "baseName": "modified",
            "type": "Date"
        },
        {
            "name": "publishingStatus",
            "baseName": "publishingStatus",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationSaha.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization guid page
*/
export class VmOpenApiOrganizationSahaGuidPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiOrganizationSaha>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiOrganizationSaha>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationSahaGuidPage.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization hierarchy
*/
export class VmOpenApiOrganizationSub {
    /**
    * Entity identifier.
    */
    'id'?: string;
    /**
    * List of organization names. Possible type values are: Name, AlternativeName.
    */
    'organizationNames'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * List of sub organizations
    */
    'subOrganizations'?: Array<VmOpenApiOrganizationSub>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "organizationNames",
            "baseName": "organizationNames",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "subOrganizations",
            "baseName": "subOrganizations",
            "type": "Array<VmOpenApiOrganizationSub>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiOrganizationSub.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of a accessibility sentence.
*/
export class VmOpenApiSentenceValue {
    /**
    * List of localized sentences.
    */
    'sentence'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "sentence",
            "baseName": "sentence",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiSentenceValue.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service collection service
*/
export class VmOpenApiServiceCollectionService {
    /**
    * Service collection service Id
    */
    'id'?: string;
    /**
    * Localized list of service collection service names. Possible type values are: Name
    */
    'name'?: Array<VmOpenApiLocalizedListItem>;
    /**
    * Localized list of service collection service descriptions. Possible type values are: Description.
    */
    'description'?: Array<VmOpenApiLocalizedListItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLocalizedListItem>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "Array<VmOpenApiLocalizedListItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiServiceCollectionService.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of Service Service collection
*/
export class VmOpenApiServiceServiceCollection {
    /**
    * Service collection Id
    */
    'id'?: string;
    /**
    * Localized list of service collection names
    */
    'name'?: Array<VmOpenApiLanguageItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Array<VmOpenApiLanguageItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiServiceServiceCollection.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of task item
*/
export class VmOpenApiTask {
    /**
    * Id of the item.
    */
    'id'?: string;
    /**
    * Name of the item.
    */
    'name'?: string;
    /**
    * The statuses for available languages.
    */
    'statuses'?: Array<VmOpenApiLanguageItem>;
    /**
    * User who has modified the item.
    */
    'modifiedBy'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "statuses",
            "baseName": "statuses",
            "type": "Array<VmOpenApiLanguageItem>"
        },
        {
            "name": "modifiedBy",
            "baseName": "modifiedBy",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiTask.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of tasks
*/
export class VmOpenApiTasks {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiTask>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiTask>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiTasks.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of translation item
*/
export class VmOpenApiTranslationItem {
    /**
    * Id of the organization.
    */
    'organizationId'?: string;
    /**
    * Name of the organization.
    */
    'organizationName'?: string;
    /**
    * Name of the organization.
    */
    'businessCode'?: string;
    /**
    * Order made by (email).
    */
    'orderer'?: string;
    /**
    * Order identifier.
    */
    'orderId'?: number;
    /**
    * Order state.
    */
    'orderState'?: string;
    /**
    * Order date.
    */
    'orderDate'?: Date;
    /**
    * Order resolved and delivered date.
    */
    'orderResolvedDate'?: Date;
    /**
    * Source language.
    */
    'sourceLanguage'?: string;
    /**
    * Amount of chars in source text.
    */
    'sourceLanguageCharAmount'?: number;
    /**
    * Target language.
    */
    'targetLanguage'?: string;
    /**
    * Type of the item, either Service or Channel.
    */
    'type'?: string;
    /**
    * Id of the item.
    */
    'itemId'?: string;
    /**
    * Name of the item.
    */
    'itemName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "organizationId",
            "baseName": "organizationId",
            "type": "string"
        },
        {
            "name": "organizationName",
            "baseName": "organizationName",
            "type": "string"
        },
        {
            "name": "businessCode",
            "baseName": "businessCode",
            "type": "string"
        },
        {
            "name": "orderer",
            "baseName": "orderer",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "number"
        },
        {
            "name": "orderState",
            "baseName": "orderState",
            "type": "string"
        },
        {
            "name": "orderDate",
            "baseName": "orderDate",
            "type": "Date"
        },
        {
            "name": "orderResolvedDate",
            "baseName": "orderResolvedDate",
            "type": "Date"
        },
        {
            "name": "sourceLanguage",
            "baseName": "sourceLanguage",
            "type": "string"
        },
        {
            "name": "sourceLanguageCharAmount",
            "baseName": "sourceLanguageCharAmount",
            "type": "number"
        },
        {
            "name": "targetLanguage",
            "baseName": "targetLanguage",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "itemId",
            "type": "string"
        },
        {
            "name": "itemName",
            "baseName": "itemName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiTranslationItem.attributeTypeMap;
    }
}

/**
* OPEN API - View Model of organization guid page
*/
export class VmOpenApiTranslationItemsPage {
    /**
    * Resultset page number (resultset paging). Page numbering starts from one.
    */
    'pageNumber'?: number;
    /**
    * How many results per page are returned (resultset paging).
    */
    'pageSize'?: number;
    /**
    * Total count of pages the resultset has (resultset paging).
    */
    'pageCount'?: number;
    /**
    * List of entity Guids.
    */
    'itemList'?: Array<VmOpenApiTranslationItem>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "pageSize",
            "type": "number"
        },
        {
            "name": "pageCount",
            "baseName": "pageCount",
            "type": "number"
        },
        {
            "name": "itemList",
            "baseName": "itemList",
            "type": "Array<VmOpenApiTranslationItem>"
        }    ];

    static getAttributeTypeMap() {
        return VmOpenApiTranslationItemsPage.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "IVmError": IVmError,
    "V10VmOpenApiElectronicChannel": V10VmOpenApiElectronicChannel,
    "V10VmOpenApiElectronicChannelIn": V10VmOpenApiElectronicChannelIn,
    "V10VmOpenApiElectronicChannelInBase": V10VmOpenApiElectronicChannelInBase,
    "V10VmOpenApiGeneralDescription": V10VmOpenApiGeneralDescription,
    "V10VmOpenApiGeneralDescriptionIn": V10VmOpenApiGeneralDescriptionIn,
    "V10VmOpenApiGeneralDescriptionInBase": V10VmOpenApiGeneralDescriptionInBase,
    "V10VmOpenApiOrganization": V10VmOpenApiOrganization,
    "V10VmOpenApiOrganizationService": V10VmOpenApiOrganizationService,
    "V10VmOpenApiPhoneChannel": V10VmOpenApiPhoneChannel,
    "V10VmOpenApiPrintableFormChannel": V10VmOpenApiPrintableFormChannel,
    "V10VmOpenApiPrintableFormChannelIn": V10VmOpenApiPrintableFormChannelIn,
    "V10VmOpenApiPrintableFormChannelInBase": V10VmOpenApiPrintableFormChannelInBase,
    "V10VmOpenApiService": V10VmOpenApiService,
    "V10VmOpenApiServiceChannelService": V10VmOpenApiServiceChannelService,
    "V10VmOpenApiServiceChannels": V10VmOpenApiServiceChannels,
    "V10VmOpenApiServiceLocationChannel": V10VmOpenApiServiceLocationChannel,
    "V10VmOpenApiServiceServiceChannel": V10VmOpenApiServiceServiceChannel,
    "V10VmOpenApiWebPageChannel": V10VmOpenApiWebPageChannel,
    "V10VmOpenApiWebPageChannelIn": V10VmOpenApiWebPageChannelIn,
    "V10VmOpenApiWebPageChannelInBase": V10VmOpenApiWebPageChannelInBase,
    "V3VmOpenApiGuidPage": V3VmOpenApiGuidPage,
    "V4VmOpenApiEmail": V4VmOpenApiEmail,
    "V4VmOpenApiFintoItem": V4VmOpenApiFintoItem,
    "V4VmOpenApiLaw": V4VmOpenApiLaw,
    "V4VmOpenApiPhone": V4VmOpenApiPhone,
    "V4VmOpenApiPhoneSimple": V4VmOpenApiPhoneSimple,
    "V4VmOpenApiPhoneWithType": V4VmOpenApiPhoneWithType,
    "V4VmOpenApiWebPage": V4VmOpenApiWebPage,
    "V6VmOpenApiServiceOrganization": V6VmOpenApiServiceOrganization,
    "V6VmOpenApiServiceServiceChannel": V6VmOpenApiServiceServiceChannel,
    "V7VmOpenApiAddressContact": V7VmOpenApiAddressContact,
    "V7VmOpenApiAddressContactIn": V7VmOpenApiAddressContactIn,
    "V7VmOpenApiFintoItemWithDescription": V7VmOpenApiFintoItemWithDescription,
    "V7VmOpenApiServiceCollection": V7VmOpenApiServiceCollection,
    "V7VmOpenApiServiceCollectionIn": V7VmOpenApiServiceCollectionIn,
    "V7VmOpenApiServiceCollectionInBase": V7VmOpenApiServiceCollectionInBase,
    "V8VmOpenApiAddressDelivery": V8VmOpenApiAddressDelivery,
    "V8VmOpenApiAddressDeliveryIn": V8VmOpenApiAddressDeliveryIn,
    "V8VmOpenApiDailyOpeningTime": V8VmOpenApiDailyOpeningTime,
    "V8VmOpenApiOrganizationGuidPage": V8VmOpenApiOrganizationGuidPage,
    "V8VmOpenApiOrganizationItem": V8VmOpenApiOrganizationItem,
    "V8VmOpenApiServiceHour": V8VmOpenApiServiceHour,
    "V9VmOpenApiAddress": V9VmOpenApiAddress,
    "V9VmOpenApiAddressIn": V9VmOpenApiAddressIn,
    "V9VmOpenApiAddressLocation": V9VmOpenApiAddressLocation,
    "V9VmOpenApiAddressLocationIn": V9VmOpenApiAddressLocationIn,
    "V9VmOpenApiChannelServicesIn": V9VmOpenApiChannelServicesIn,
    "V9VmOpenApiContactDetails": V9VmOpenApiContactDetails,
    "V9VmOpenApiContactDetailsIn": V9VmOpenApiContactDetailsIn,
    "V9VmOpenApiContactDetailsInBase": V9VmOpenApiContactDetailsInBase,
    "V9VmOpenApiElectronicChannel": V9VmOpenApiElectronicChannel,
    "V9VmOpenApiEntrance": V9VmOpenApiEntrance,
    "V9VmOpenApiExtraType": V9VmOpenApiExtraType,
    "V9VmOpenApiOrganizationIn": V9VmOpenApiOrganizationIn,
    "V9VmOpenApiOrganizationInBase": V9VmOpenApiOrganizationInBase,
    "V9VmOpenApiPhoneChannel": V9VmOpenApiPhoneChannel,
    "V9VmOpenApiPhoneChannelIn": V9VmOpenApiPhoneChannelIn,
    "V9VmOpenApiPhoneChannelInBase": V9VmOpenApiPhoneChannelInBase,
    "V9VmOpenApiPrintableFormChannel": V9VmOpenApiPrintableFormChannel,
    "V9VmOpenApiService": V9VmOpenApiService,
    "V9VmOpenApiServiceAndChannelIn": V9VmOpenApiServiceAndChannelIn,
    "V9VmOpenApiServiceAndChannelRelationAstiInBase": V9VmOpenApiServiceAndChannelRelationAstiInBase,
    "V9VmOpenApiServiceAndChannelRelationBySource": V9VmOpenApiServiceAndChannelRelationBySource,
    "V9VmOpenApiServiceAndChannelRelationBySourceAsti": V9VmOpenApiServiceAndChannelRelationBySourceAsti,
    "V9VmOpenApiServiceAndChannelRelationBySourceInBase": V9VmOpenApiServiceAndChannelRelationBySourceInBase,
    "V9VmOpenApiServiceAndChannelRelationInBase": V9VmOpenApiServiceAndChannelRelationInBase,
    "V9VmOpenApiServiceChannelService": V9VmOpenApiServiceChannelService,
    "V9VmOpenApiServiceChannelServiceInBase": V9VmOpenApiServiceChannelServiceInBase,
    "V9VmOpenApiServiceChannels": V9VmOpenApiServiceChannels,
    "V9VmOpenApiServiceIn": V9VmOpenApiServiceIn,
    "V9VmOpenApiServiceInBase": V9VmOpenApiServiceInBase,
    "V9VmOpenApiServiceLocationChannel": V9VmOpenApiServiceLocationChannel,
    "V9VmOpenApiServiceLocationChannelIn": V9VmOpenApiServiceLocationChannelIn,
    "V9VmOpenApiServiceLocationChannelInBase": V9VmOpenApiServiceLocationChannelInBase,
    "V9VmOpenApiServiceProducerIn": V9VmOpenApiServiceProducerIn,
    "V9VmOpenApiServiceServiceChannel": V9VmOpenApiServiceServiceChannel,
    "V9VmOpenApiServiceServiceChannelAstiInBase": V9VmOpenApiServiceServiceChannelAstiInBase,
    "V9VmOpenApiServiceServiceChannelBySource": V9VmOpenApiServiceServiceChannelBySource,
    "V9VmOpenApiServiceServiceChannelBySourceAsti": V9VmOpenApiServiceServiceChannelBySourceAsti,
    "V9VmOpenApiServiceServiceChannelInBase": V9VmOpenApiServiceServiceChannelInBase,
    "V9VmOpenApiServiceVoucher": V9VmOpenApiServiceVoucher,
    "V9VmOpenApiWebPage": V9VmOpenApiWebPage,
    "V9VmOpenApiWebPageChannel": V9VmOpenApiWebPageChannel,
    "VmOpenApiAccessibilityClassification": VmOpenApiAccessibilityClassification,
    "VmOpenApiAccessibilityContactInfo": VmOpenApiAccessibilityContactInfo,
    "VmOpenApiAccessibilitySentence": VmOpenApiAccessibilitySentence,
    "VmOpenApiAddressOther": VmOpenApiAddressOther,
    "VmOpenApiAddressOtherIn": VmOpenApiAddressOtherIn,
    "VmOpenApiAddressPostOfficeBox": VmOpenApiAddressPostOfficeBox,
    "VmOpenApiAddressPostOfficeBoxIn": VmOpenApiAddressPostOfficeBoxIn,
    "VmOpenApiAddressStreet": VmOpenApiAddressStreet,
    "VmOpenApiAddressStreetIn": VmOpenApiAddressStreetIn,
    "VmOpenApiAddressStreetWithCoordinates": VmOpenApiAddressStreetWithCoordinates,
    "VmOpenApiAddressStreetWithCoordinatesIn": VmOpenApiAddressStreetWithCoordinatesIn,
    "VmOpenApiArea": VmOpenApiArea,
    "VmOpenApiAreaIn": VmOpenApiAreaIn,
    "VmOpenApiAttachment": VmOpenApiAttachment,
    "VmOpenApiAttachmentWithType": VmOpenApiAttachmentWithType,
    "VmOpenApiCodeListItem": VmOpenApiCodeListItem,
    "VmOpenApiCodeListPage": VmOpenApiCodeListPage,
    "VmOpenApiCoordinates": VmOpenApiCoordinates,
    "VmOpenApiDialCodeListItem": VmOpenApiDialCodeListItem,
    "VmOpenApiEntityGuidPage": VmOpenApiEntityGuidPage,
    "VmOpenApiEntityItem": VmOpenApiEntityItem,
    "VmOpenApiExtraType": VmOpenApiExtraType,
    "VmOpenApiItem": VmOpenApiItem,
    "VmOpenApiLanguageItem": VmOpenApiLanguageItem,
    "VmOpenApiLocalizedListItem": VmOpenApiLocalizedListItem,
    "VmOpenApiMunicipality": VmOpenApiMunicipality,
    "VmOpenApiNameTypeByLanguage": VmOpenApiNameTypeByLanguage,
    "VmOpenApiOrganizationEInvoicing": VmOpenApiOrganizationEInvoicing,
    "VmOpenApiOrganizationHierarchy": VmOpenApiOrganizationHierarchy,
    "VmOpenApiOrganizationParent": VmOpenApiOrganizationParent,
    "VmOpenApiOrganizationSaha": VmOpenApiOrganizationSaha,
    "VmOpenApiOrganizationSahaGuidPage": VmOpenApiOrganizationSahaGuidPage,
    "VmOpenApiOrganizationSub": VmOpenApiOrganizationSub,
    "VmOpenApiSentenceValue": VmOpenApiSentenceValue,
    "VmOpenApiServiceCollectionService": VmOpenApiServiceCollectionService,
    "VmOpenApiServiceServiceCollection": VmOpenApiServiceServiceCollection,
    "VmOpenApiTask": VmOpenApiTask,
    "VmOpenApiTasks": VmOpenApiTasks,
    "VmOpenApiTranslationItem": VmOpenApiTranslationItem,
    "VmOpenApiTranslationItemsPage": VmOpenApiTranslationItemsPage,
}